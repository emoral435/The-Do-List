(()=>{"use strict";const e=e=>({projectName:e,tasks:[]}),t=function(e="none",t="",n=""){let r,a=document.createElement("div");if(""!=e){r=e.split(" ");for(let e=0;e<r.length;e++)a.classList.add(r[e])}return null!=t&&(a.id=t),null!=n&&(a.textContent=n),a},n=function(e="",t="",n=""){let r=e.split(" "),a=document.createElement("button");if(""!=e)for(let e=0;e<r.length;e++)a.classList.add(r[e]);return a.id=t,a.textContent=n,a},r=function(e){let t="h-6 w-6 cursor-pointer hover:-translate-y-1 hover:scale-110 transition ease-in-out duration-300".split(" "),n=document.createElement("img");n.src="/src/modules/edit.svg",n.dataset.modalTarget="#"+e+"otherModal";for(let e=0;e<t.length;e++)n.classList.add(t[e]);return n},a=function(e,t){let n="min-h-[20px] min-w-[20px] inline-block bg-white border-[3px] rounded-[50%] hover:bg-slate-300 mx-3".split(" "),r=document.createElement("span");for(let e=0;e<n.length;e++)r.classList.add(n[e]);return 0==t?r.classList.add("border-black"):1==t?r.classList.add("border-blue-500"):2==t?r.classList.add("border-orange-500"):3==t&&r.classList.add("border-red-500"),r.dataset.id=e,r},o=function(e){let t="h-[2px] bg-slate-700 w-[12px] block".split(" "),n=document.createElement("span");for(let e=0;e<t.length;e++)n.classList.add(t[e]);return e?n.classList.add("translate-y-[2px]"):n.classList.add("rotate-[90deg]"),n},i=function(e){let t=document.createElement("img");t.src="/src/modules/trash.svg",t.dataset.id=e;let n="h-6 w-6 cursor-pointer trash hover:-translate-y-1 hover:scale-110 transition ease-in-out duration-300".split(" ");for(let e=0;e<n.length;e++)t.classList.add(n[e]);return t},l=function(e){let t=e+"form",n=document.createElement("form");return n.setAttribute("id",t),n.setAttribute("action",""),n},s=function(e,t){let n=e+t,r=document.createElement("label");return r.setAttribute("for",n),r.textContent=t[0].toUpperCase()+t.slice(1,t.length)+":",r},u=function(e,t,n,r){let a=r.split(" "),o=document.createElement("input");for(let e=0;e<a.length;e++)o.classList.add(a[e]);let i=t+n;return o.setAttribute("type",e),o.setAttribute("id",i),"text"===e&&o.setAttribute("required",""),o},d=function(e,t){let n=t.split(" "),r=document.createElement("textarea");r.setAttribute("required","");let a=e+"description";for(let e=0;e<n.length;e++)r.classList.add(n[e]);return r.setAttribute("id",a),r.cols="5",r.rows="5",r},c=function(e,t){let n=t.split(" "),r=document.createElement("select"),a=e+"priority";r.setAttribute("id",a);for(let e=0;e<n.length;e++)r.classList.add(n[e]);let o=document.createElement("option");o.value="0",o.textContent="None";let i=document.createElement("option");i.value="1",i.textContent="Low";let l=document.createElement("option");l.value="2",l.textContent="Medium";let s=document.createElement("option");return s.value="3",s.textContent="High",r.append(o,i,l,s),r},m=(e,t,n,r,a)=>({objective:e,desc:t,priority:n,date:r,project:a});function f(e){let t=0;for(let n=0;n<He.getProjectItem().nameArray.length;n++)He.getProjectItem().nameArray[n]==e&&(t=n);return t}function g(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function h(e){return h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},h(e)}function p(e){return g(1,arguments),e instanceof Date||"object"===h(e)&&"[object Date]"===Object.prototype.toString.call(e)}function v(e){return v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},v(e)}function y(e){g(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===v(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function b(e){if(g(1,arguments),!p(e)&&"number"!=typeof e)return!1;var t=y(e);return!isNaN(Number(t))}function w(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function k(e,t){g(2,arguments);var n=y(e).getTime(),r=w(t);return new Date(n+r)}function T(e,t){g(2,arguments);var n=w(t);return k(e,-n)}var j=864e5;function E(e){g(1,arguments);var t=1,n=y(e),r=n.getUTCDay(),a=(r<t?7:0)+r-t;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function x(e){g(1,arguments);var t=y(e),n=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=E(r),o=new Date(0);o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0);var i=E(o);return t.getTime()>=a.getTime()?n+1:t.getTime()>=i.getTime()?n:n-1}function C(e){g(1,arguments);var t=x(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var r=E(n);return r}var D=6048e5,M={};function I(){return M}function A(e,t){var n,r,a,o,i,l,s,u;g(1,arguments);var d=I(),c=w(null!==(n=null!==(r=null!==(a=null!==(o=null==t?void 0:t.weekStartsOn)&&void 0!==o?o:null==t||null===(i=t.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==a?a:d.weekStartsOn)&&void 0!==r?r:null===(s=d.locale)||void 0===s||null===(u=s.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==n?n:0);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var m=y(e),f=m.getUTCDay(),h=(f<c?7:0)+f-c;return m.setUTCDate(m.getUTCDate()-h),m.setUTCHours(0,0,0,0),m}function B(e,t){var n,r,a,o,i,l,s,u;g(1,arguments);var d=y(e),c=d.getUTCFullYear(),m=I(),f=w(null!==(n=null!==(r=null!==(a=null!==(o=null==t?void 0:t.firstWeekContainsDate)&&void 0!==o?o:null==t||null===(i=t.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==a?a:m.firstWeekContainsDate)&&void 0!==r?r:null===(s=m.locale)||void 0===s||null===(u=s.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==n?n:1);if(!(f>=1&&f<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=new Date(0);h.setUTCFullYear(c+1,0,f),h.setUTCHours(0,0,0,0);var p=A(h,t),v=new Date(0);v.setUTCFullYear(c,0,f),v.setUTCHours(0,0,0,0);var b=A(v,t);return d.getTime()>=p.getTime()?c+1:d.getTime()>=b.getTime()?c:c-1}function N(e,t){var n,r,a,o,i,l,s,u;g(1,arguments);var d=I(),c=w(null!==(n=null!==(r=null!==(a=null!==(o=null==t?void 0:t.firstWeekContainsDate)&&void 0!==o?o:null==t||null===(i=t.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==a?a:d.firstWeekContainsDate)&&void 0!==r?r:null===(s=d.locale)||void 0===s||null===(u=s.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==n?n:1),m=B(e,t),f=new Date(0);f.setUTCFullYear(m,0,c),f.setUTCHours(0,0,0,0);var h=A(f,t);return h}var P=6048e5;function S(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const L=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return S("yy"===t?r%100:r,t.length)},U=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):S(n+1,2)},W=function(e,t){return S(e.getUTCDate(),t.length)},Y=function(e,t){return S(e.getUTCHours()%12||12,t.length)},q=function(e,t){return S(e.getUTCHours(),t.length)},H=function(e,t){return S(e.getUTCMinutes(),t.length)},O=function(e,t){return S(e.getUTCSeconds(),t.length)},F=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return S(Math.floor(r*Math.pow(10,n-3)),t.length)};function z(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=t||"";return n+String(a)+i+S(o,2)}function Q(e,t){return e%60==0?(e>0?"-":"+")+S(Math.abs(e)/60,2):X(e,t)}function X(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+S(Math.floor(a/60),2)+n+S(a%60,2)}const G={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return L(e,t)},Y:function(e,t,n,r){var a=B(e,r),o=a>0?a:1-a;return"YY"===t?S(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):S(o,t.length)},R:function(e,t){return S(x(e),t.length)},u:function(e,t){return S(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return S(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return S(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return U(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return S(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){var a=function(e,t){g(1,arguments);var n=y(e),r=A(n,t).getTime()-N(n,t).getTime();return Math.round(r/P)+1}(e,r);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):S(a,t.length)},I:function(e,t,n){var r=function(e){g(1,arguments);var t=y(e),n=E(t).getTime()-C(t).getTime();return Math.round(n/D)+1}(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):S(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):W(e,t)},D:function(e,t,n){var r=function(e){g(1,arguments);var t=y(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=t.getTime(),a=n-r;return Math.floor(a/j)+1}(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):S(r,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return S(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return S(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return S(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return Y(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):q(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):S(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):S(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):H(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):O(e,t)},S:function(e,t){return F(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return Q(a);case"XXXX":case"XX":return X(a);default:return X(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return Q(a);case"xxxx":case"xx":return X(a);default:return X(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+z(a,":");default:return"GMT"+X(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+z(a,":");default:return"GMT"+X(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return S(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return S((r._originalDate||e).getTime(),t.length)}};var R=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},J=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}},Z={p:J,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return R(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",R(a,t)).replace("{{time}}",J(o,t))}};const $=Z;function _(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var V=["D","DD"],K=["YY","YYYY"];function ee(e){return-1!==V.indexOf(e)}function te(e){return-1!==K.indexOf(e)}function ne(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var re={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function ae(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,r=e.formats[n]||e.formats[e.defaultWidth];return r}}var oe,ie={date:ae({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:ae({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:ae({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},le={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function se(e){return function(t,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var a=e.defaultFormattingWidth||e.defaultWidth,o=null!=n&&n.width?String(n.width):a;r=e.formattingValues[o]||e.formattingValues[a]}else{var i=e.defaultWidth,l=null!=n&&n.width?String(n.width):e.defaultWidth;r=e.values[l]||e.values[i]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function ue(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],o=t.match(a);if(!o)return null;var i,l=o[0],s=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],u=Array.isArray(s)?ce(s,(function(e){return e.test(l)})):de(s,(function(e){return e.test(l)}));i=e.valueCallback?e.valueCallback(u):u,i=n.valueCallback?n.valueCallback(i):i;var d=t.slice(l.length);return{value:i,rest:d}}}function de(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function ce(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}const me={code:"en-US",formatDistance:function(e,t,n){var r,a=re[e];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:ie,formatRelative:function(e,t,n,r){return le[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:se({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:se({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:se({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:se({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:se({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(oe={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(oe.matchPattern);if(!n)return null;var r=n[0],a=e.match(oe.parsePattern);if(!a)return null;var o=oe.valueCallback?oe.valueCallback(a[0]):a[0];o=t.valueCallback?t.valueCallback(o):o;var i=e.slice(r.length);return{value:o,rest:i}}),era:ue({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:ue({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:ue({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:ue({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:ue({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var fe=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ge=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,he=/^'([^]*?)'?$/,pe=/''/g,ve=/[a-zA-Z]/;function ye(e){var t=e.match(he);return t?t[1].replace(pe,"'"):e}Math.pow(10,8);var be=36e5;function we(e,t){var n;g(1,arguments);var r=w(null!==(n=null==t?void 0:t.additionalDigits)&&void 0!==n?n:2);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var a,o=xe(e);if(o.date){var i=Ce(o.date,r);a=De(i.restDateString,i.year)}if(!a||isNaN(a.getTime()))return new Date(NaN);var l,s=a.getTime(),u=0;if(o.time&&(u=Ie(o.time),isNaN(u)))return new Date(NaN);if(!o.timezone){var d=new Date(s+u),c=new Date(0);return c.setFullYear(d.getUTCFullYear(),d.getUTCMonth(),d.getUTCDate()),c.setHours(d.getUTCHours(),d.getUTCMinutes(),d.getUTCSeconds(),d.getUTCMilliseconds()),c}return l=Be(o.timezone),isNaN(l)?new Date(NaN):new Date(s+u+l)}var ke={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},Te=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,je=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,Ee=/^([+-])(\d{2})(?::?(\d{2}))?$/;function xe(e){var t,n={},r=e.split(ke.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?t=r[0]:(n.date=r[0],t=r[1],ke.timeZoneDelimiter.test(n.date)&&(n.date=e.split(ke.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var a=ke.timezone.exec(t);a?(n.time=t.replace(a[1],""),n.timezone=a[1]):n.time=t}return n}function Ce(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:NaN,restDateString:""};var a=r[1]?parseInt(r[1]):null,o=r[2]?parseInt(r[2]):null;return{year:null===o?a:100*o,restDateString:e.slice((r[1]||r[2]).length)}}function De(e,t){if(null===t)return new Date(NaN);var n=e.match(Te);if(!n)return new Date(NaN);var r=!!n[4],a=Me(n[1]),o=Me(n[2])-1,i=Me(n[3]),l=Me(n[4]),s=Me(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,l,s)?function(e,t,n){var r=new Date(0);r.setUTCFullYear(e,0,4);var a=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(t,l,s):new Date(NaN);var u=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(Ne[t]||(Pe(e)?29:28))}(t,o,i)&&function(e,t){return t>=1&&t<=(Pe(e)?366:365)}(t,a)?(u.setUTCFullYear(t,o,Math.max(a,i)),u):new Date(NaN)}function Me(e){return e?parseInt(e):1}function Ie(e){var t=e.match(je);if(!t)return NaN;var n=Ae(t[1]),r=Ae(t[2]),a=Ae(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,r,a)?n*be+6e4*r+1e3*a:NaN}function Ae(e){return e&&parseFloat(e.replace(",","."))||0}function Be(e){if("Z"===e)return 0;var t=e.match(Ee);if(!t)return 0;var n="+"===t[1]?-1:1,r=parseInt(t[2]),a=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,a)?n*(r*be+6e4*a):NaN}var Ne=[31,null,31,30,31,30,31,31,30,31,30,31];function Pe(e){return e%400==0||e%4==0&&e%100!=0}const Se=(()=>{function e(e){null!=e&&(e.classList.remove("active"),overlay.classList.remove("active"))}return{taskModal:r=>{let a=t("modal break-normal",r+"Modal"),o=t("modal-header"),i=n("close-button","","");i.innerHTML="&times;",i.dataset.closeButton,i.addEventListener("click",(()=>{e(i.closest(".modal"))})),o.append(t("title","","Task Details"),i),a.append(o);let l=t("modal-body"),s=f(document.getElementById("title").textContent),u=function(e,t,n){var r,a,o,i,l,s,u,d,c,m,f,h,p,v,k,j,E,x;g(2,arguments);var C=String(t),D=I(),M=null!==(r=null!==(a=null==n?void 0:n.locale)&&void 0!==a?a:D.locale)&&void 0!==r?r:me,A=w(null!==(o=null!==(i=null!==(l=null!==(s=null==n?void 0:n.firstWeekContainsDate)&&void 0!==s?s:null==n||null===(u=n.locale)||void 0===u||null===(d=u.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==l?l:D.firstWeekContainsDate)&&void 0!==i?i:null===(c=D.locale)||void 0===c||null===(m=c.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==o?o:1);if(!(A>=1&&A<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var B=w(null!==(f=null!==(h=null!==(p=null!==(v=null==n?void 0:n.weekStartsOn)&&void 0!==v?v:null==n||null===(k=n.locale)||void 0===k||null===(j=k.options)||void 0===j?void 0:j.weekStartsOn)&&void 0!==p?p:D.weekStartsOn)&&void 0!==h?h:null===(E=D.locale)||void 0===E||null===(x=E.options)||void 0===x?void 0:x.weekStartsOn)&&void 0!==f?f:0);if(!(B>=0&&B<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!M.localize)throw new RangeError("locale must contain localize property");if(!M.formatLong)throw new RangeError("locale must contain formatLong property");var N=y(e);if(!b(N))throw new RangeError("Invalid time value");var P=_(N),S=T(N,P),L={firstWeekContainsDate:A,weekStartsOn:B,locale:M,_originalDate:N},U=C.match(ge).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,$[t])(e,M.formatLong):e})).join("").match(fe).map((function(r){if("''"===r)return"'";var a=r[0];if("'"===a)return ye(r);var o=G[a];if(o)return null!=n&&n.useAdditionalWeekYearTokens||!te(r)||ne(r,t,String(e)),null!=n&&n.useAdditionalDayOfYearTokens||!ee(r)||ne(r,t,String(e)),o(S,r,M.localize,L);if(a.match(ve))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return r})).join("");return U}(we(He.getProjectItem().projectArray[s].tasks[r].date),"MMMM dd, yyyy");console.log(u);let d=He.getProjectItem().projectArray[s].projectName+" / "+He.getProjectItem().projectArray[s].tasks[r].project;return l.append(t("","","Project: "+d)),l.append(t("","","Title: "+He.getProjectItem().projectArray[s].tasks[r].objective)),l.append(t("","","Description: "+He.getProjectItem().projectArray[s].tasks[r].desc)),l.append(t("","","Due Date: "+u)),l.append(t("","","Priority: "+He.getProjectItem().projectArray[s].tasks[r].priority)),a.append(l),a},editModal:r=>{let a=t("modal",r+"otherModal"),i=t("modal-header"),g=n("close-button");g.innerHTML="&times;",g.dataset.closeButton,g.addEventListener("click",(()=>{e(g.closest(".modal"))})),i.append(t("title","","Edit Task"),g),a.append(i);let h=t("modal-body"),p=l(r),v=t("flex flex-col gap-2"),y=t("flex flex-col"),b=s(r,"objective"),w=u("text",r,"objective","bg-white border-[1px] border-black h-[2em] focus:border-[2px] focus:border-[#2994b2] focus:outline-none");y.append(b,w),v.append(y);let k=t("flex flex-col"),T=s(r,"description"),j=d(r,"bg-white border-[1px] border-black focus:border-[2px] focus:border-[#2994b2] focus:outline-none");k.append(T,j),v.append(k);let E=t("flex justify-around"),x=t("flex justify-start gap-12"),C=t("flex flex-col"),D=s(r,"priority"),M=c(r,"bg-white border-[1px] border-black h-7 focus:border-[2px] focus:border-[#2994b2] focus:outline-none");C.append(D,M),x.append(C);let I=t("flex flex-col"),A=s(r,"date"),B=u("date",r,"date","bg-white border-[1px] border-black focus:border-[2px] focus:border-[#2994b2] focus:outline-none");I.append(A,B),x.append(I),E.append(x);let N=n("flex text-xl my-2 items-center");N.setAttribute("type","submit"),N.setAttribute("form","taskForm");let P=f(document.getElementById("title").innerHTML);N.addEventListener("click",(e=>{const t=document.getElementById("overlay");e.preventDefault();let n=r+"objective",a=r+"description",o=r+"priority",i=r+"date",l=document.getElementById(n).value,s=document.getElementById(a).value,u=document.getElementById(o).value,d=document.getElementById(i).value,c=document.getElementById("title").innerHTML,f=He.getProjectItem();if(0!=P){for(let e=0;e<f.projectArray[0].tasks.length;e++)f.projectArray[0].tasks[e].objective==f.projectArray[P].tasks[r].objective&&f.projectArray[0].tasks.splice(e,1,m(l,s,u,d,c));f.projectArray[P].tasks.splice(r,1,m(l,s,u,d,c))}else f.projectArray[P].tasks.splice(r,1,m(l,s,u,d,c));document.getElementById(n).value="",document.getElementById(a).value="",document.getElementById(o).value="0",document.getElementById(i).value="",He.updateProjectInfo(f);let g=document.getElementById("content");for(;g.childNodes.length>4;)g.removeChild(g.firstChild);let h=He.getProjectItem();if(h.projectArray[P].tasks.length>0)for(let e=0;e<h.projectArray[P].tasks.length;e++){let t=We.upload(e);document.getElementById("content").insertBefore(t,document.getElementById("taskButton"))}t.classList.remove("active")}));let S=t("mx-2 relative"),L=o(!0),U=o(!1),W=t("","","Add");return S.append(L,U),N.append(S,W),E.append(N),v.append(E),p.append(v),h.append(p),a.append(h),a}}})(),Le=Se,Ue=(()=>{let e=0;return{kill:t=>{let n="task"+t,r=f(document.getElementById("title").innerHTML);document.getElementById("content").removeChild(document.getElementById(n));let a=He.getProjectItem();if(0!=r){for(let e=0;e<a.projectArray[0].tasks.length;e++)a.projectArray[0].tasks[e].objective==a.projectArray[r].tasks[t].objective&&a.projectArray[0].tasks.splice(e,1);a.projectArray[r].tasks.splice(t-e,1)}else a.projectArray[r].tasks.splice(t-e,1);He.updateProjectInfo(a),0==a.projectArray[r].tasks.length?e=0:e++},reptitions:e}})(),We=(()=>{function e(e){null!=e&&(e.classList.add("active"),overlay.classList.add("active"))}return{upload:o=>{let l=t("","task"+o),s=t("rounded-[10px] flex justify-between hover:bg-[#cccccc] min-h-[3rem] items-center hover:relative hover:bottom-1 hover:shadow-xl flex-col lg:flex-row py-2"),u=f(document.getElementById("title").innerHTML),d=t("flex items-start justify-start lg:justify-start lg:items-center w-full"),c=a(o,He.getProjectItem().projectArray[u].tasks[o].priority);c.addEventListener("click",(()=>{Ue.kill(o)}));let m=He.getProjectItem().projectArray[u].tasks[o].objective,g=t("","",m);d.append(c,g),s.append(d);let h=t("flex gap-6 mr-8"),p=t(),v=n("hover:-translate-y-1 hover:scale-110 transition ease-in-out duration-300","","Details");v.dataset.modalTarget=o+"Modal",v.addEventListener("click",(()=>{e(document.getElementById(v.dataset.modalTarget))}));let y=Le.taskModal(o);p.append(v,y),h.append(p);let b=r(o);b.dataset.modalTarget=o+"otherModal",b.addEventListener("click",(()=>{e(document.getElementById(b.dataset.modalTarget))}));let w=Le.editModal(o);h.append(b,w);let k=i(o);return k.addEventListener("click",(()=>{Ue.kill(o)})),h.append(k),s.append(h),l.append(s),l}}})();function Ye(e){e.forEach((e=>{let t=e.cloneNode(!0);e.parentNode.replaceChild(t,e)}))}function qe(){Ye(document.querySelectorAll(".killbill")),document.querySelectorAll(".killbill").forEach((e=>{e.addEventListener("click",(()=>{e.parentElement.classList.add("gettingDeleted");let t=f(e.previousElementSibling.dataset.projectName),n=He.getProjectItem();n.nameArray.splice(t,1),n.projectArray.splice(t,1);let r=e.previousElementSibling.dataset.projectName.trim();if(n.projectArray[0].tasks.length>0)for(let e=0;e<n.projectArray[0].tasks.length;e++)n.projectArray[0].tasks[e].project==r&&(n.projectArray[0].tasks.splice(e,1),e-=1);He.updateProjectInfo(n),e.parentElement.remove()}))}))}const He=(()=>{const e=e=>{localStorage.setItem("projectInfo",JSON.stringify(e))},t=()=>JSON.parse(localStorage.getItem("projectInfo"));return{updateProjectInfo:e,getProjectItem:t,initialize:()=>{let n=t();if(e(n),0!=t().projectArray[0].tasks.length)for(let e=0;e<t().projectArray[0].tasks.length;e++){let t=We.upload(e);document.getElementById("content").insertBefore(t,document.getElementById("taskButton"))}(()=>{for(let e=3;e<t().nameArray.length;e++){let n=t().nameArray[e];const r=document.getElementById("additionalProjects"),a=Ke.makeBtn(["hover:bg-[#cccccc]","rounded-md","w-full","py-2","flex","justify-between","items-center","h-12","px-1","directory"]),o=Ke.makeImg(["h-[1.3rem]","w-[1.3rem]","flex","justify-start","items-center","mx-4","box-content"]),i=Ke.makeDiv(n);i.classList.add("closest");const l=Ke.makeX(["ml-4","z-10","flex","justify-end","killbill"]);a.append(o),a.append(i),a.append(l),r.insertBefore(a,document.getElementById("addBefore")),Ye(document.querySelectorAll(".directory")),Ke.buttonChange(),qe()}})()}}})(),Oe=(()=>{const t=[],n=[];return document.querySelectorAll("[data-project-name]").forEach((r=>{t.push(r.dataset.projectName);let a=e(r.dataset.projectName);n.push(a)})),{nameArray:t,projectArray:n}})();function Fe(e,t){g(2,arguments);var n=y(e),r=y(t);return n.getTime()<r.getTime()}function ze(e){g(1,arguments);var t=y(e);return t.setHours(0,0,0,0),t}var Qe=864e5;function Xe(e,t){g(2,arguments);var n=ze(e),r=ze(t),a=n.getTime()-_(n),o=r.getTime()-_(r);return Math.round((a-o)/Qe)}function Ge(e,t){g(2,arguments);var n=y(e),r=w(t);return isNaN(r)?new Date(NaN):r?(n.setDate(n.getDate()+r),n):n}function Re(e,t){g(2,arguments);var n=y(e),r=w(t);if(isNaN(r))return new Date(NaN);if(!r)return n;var a=n.getDate(),o=new Date(n.getTime());o.setMonth(n.getMonth()+r+1,0);var i=o.getDate();return a>=i?o:(n.setFullYear(o.getFullYear(),o.getMonth(),a),n)}function Je(e){return Je="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Je(e)}function Ze(e,t){if(g(2,arguments),!t||"object"!==Je(t))return new Date(NaN);var n=t.years?w(t.years):0,r=t.months?w(t.months):0,a=t.weeks?w(t.weeks):0,o=t.days?w(t.days):0,i=t.hours?w(t.hours):0,l=t.minutes?w(t.minutes):0,s=t.seconds?w(t.seconds):0,u=y(e),d=r||n?Re(u,r+12*n):u,c=o||a?Ge(d,o+7*a):d,m=l+60*i,f=s+60*m,h=1e3*f,p=new Date(c.getTime()+h);return p}const $e=()=>{let e=[],t=He.getProjectItem();for(let n=1;n<t.projectArray.length;n++)if(1!=n&&0!=t.projectArray[n].tasks.length)for(let r=0;r<t.projectArray[n].tasks.length;r++)""!=t.projectArray[n].tasks[r].date&&Fe(we(t.projectArray[n].tasks[r].date),function(e){g(1,arguments);var t=y(e);return t.setHours(23,59,59,999),t}(Date.now()))&&e.push(t.projectArray[n].tasks[r]);return e},_e=()=>{let e=[],t=He.getProjectItem();for(let l=1;l<t.projectArray.length;l++)if(2!=l&&0!=t.projectArray[l].tasks.length)for(let s=0;s<t.projectArray[l].tasks.length;s++)""!=t.projectArray[l].tasks[s].date&&Xe(Ze((n=void 0,void 0,void 0,void 0,i=void 0,r=(n=new Date).getFullYear(),a=n.getMonth(),o=n.getDate(),(i=new Date(0)).setFullYear(r,a,o+1),i.setHours(0,0,0,0),i),{days:7}),we(t.projectArray[l].tasks[s].date))<=7&&e.push(t.projectArray[l].tasks[s]);var n,r,a,o,i;return e},Ve=e=>{Ue.reptitions=0;let t=f(document.getElementById("title").innerHTML.trim()),n=document.getElementById("content");for(;n.childNodes.length>4;)n.removeChild(n.firstChild);if(document.getElementById("taskButton").classList.remove("hidden"),!e.classList.contains("gettingDeleted")){let n=He.getProjectItem();if(e.childNodes.length>3&&"Inbox"!=e.childNodes[3].innerHTML){if("Today"==e.childNodes[3].innerHTML){if(document.getElementById("taskButton").classList.add("hidden"),n.projectArray[1].tasks=$e(),He.updateProjectInfo(n),n.projectArray[1].tasks.length>0)for(let e=0;e<n.projectArray[1].tasks.length;e++){let t=We.upload(e);document.getElementById("content").insertBefore(t,document.getElementById("taskButton"))}}else if("Upcoming"==e.childNodes[3].innerHTML&&(document.getElementById("taskButton").classList.add("hidden"),n.projectArray[2].tasks=_e(),He.updateProjectInfo(n),n.projectArray[2].tasks.length>0))for(let e=0;e<n.projectArray[2].tasks.length;e++){let t=We.upload(e);document.getElementById("content").insertBefore(t,document.getElementById("taskButton"))}}else if(n.projectArray[t].tasks.length>0){document.getElementById("taskButton");for(let e=0;e<n.projectArray[t].tasks.length;e++){let t=We.upload(e);document.getElementById("content").insertBefore(t,document.getElementById("taskButton"))}}}},Ke=(()=>{const t=()=>{let e=document.querySelectorAll(".directory");for(let t=0;t<e.length;t++)e[t].addEventListener("click",(()=>{e.forEach((e=>{e.classList.contains("toggled")&&e.classList.remove("toggled")}));const n=document.getElementById("title");let r,a=e[t].childNodes;r=a.length>3?a[3].textContent:a[1].textContent,e[t].classList.add("toggled"),n.textContent=r}));document.querySelectorAll(".directory").forEach((e=>{e.addEventListener("click",(()=>{Ve(e)}))}))};function n(e){const t=document.createElement("button");for(let n=0;n<e.length;n++)t.classList.add(e[n]);return t}function r(e){const t=document.createElement("div");t.innerHTML="&times;";for(let n=0;n<e.length;n++)t.classList.add(e[n]);return t}function a(e){const t=new Image(20,20);t.src="/src/modules/project-image.png";for(let n=0;n<e.length;n++)t.classList.add(e[n]);return t}function o(e){const t=document.createElement("div");return t.textContent=e,t.dataset.projectName=e,t.dataset.id=Oe.nameArray.length-1,t}return{buttonChange:t,navToggle:()=>{const e=document.getElementsByClassName("toggle-button")[0],t=document.getElementById("nav"),n=document.getElementById("main");e.addEventListener("click",(()=>{t.classList.toggle("active"),n.classList.toggle("active")}))},activateModals:()=>{const e=document.querySelectorAll("[data-modal-target"),t=document.querySelectorAll("[data-close-button]"),n=document.getElementById("overlay");e.forEach((e=>{e.addEventListener("click",(()=>{var t;null!=(t=document.querySelector(e.dataset.modalTarget))&&(t.classList.add("active"),n.classList.add("active"))}))})),t.forEach((e=>{e.addEventListener("click",(()=>{var t;null!=(t=e.closest(".modal"))&&(t.classList.remove("active"),n.classList.remove("active"))}))}))},addProject:()=>{document.getElementById("addProject").addEventListener("click",(i=>{i.preventDefault(),function(){const i=document.getElementById("name").value.trim();document.getElementById("name").value="";let l=0,s=0;for(;l<He.getProjectItem().nameArray.length;){if(He.getProjectItem().nameArray[l]===i){s++;break}l++}if(0==s){let l=e(i),s=He.getProjectItem();s.projectArray.push(l),s.nameArray.push(i);const u=document.getElementById("additionalProjects"),d=n(["hover:bg-[#cccccc]","rounded-md","w-full","py-2","flex","justify-between","items-center","h-12","px-1","directory"]),c=a(["h-[1.3rem]","w-[1.3rem]","flex","justify-start","items-center","mx-4","box-content"]),m=o(i);m.classList.add("closest");const f=r(["ml-4","z-10","flex","justify-end","killbill"]);d.append(c),d.append(m),d.append(f),u.insertBefore(d,document.getElementById("addBefore")),Ye(document.querySelectorAll(".directory")),t(),qe(),He.updateProjectInfo(s)}}()}))},addTask:()=>{document.getElementById("addTask").addEventListener("click",(e=>{e.preventDefault(),function(){const e=document.getElementById("title");let t=f(e.innerHTML),n=document.getElementById("objective").value,r=document.getElementById("description").value,a=document.getElementById("priority").value,o=document.getElementById("date").value,i=He.getProjectItem();"Inbox"!=e.textContent?(i.projectArray[0].tasks.push(m(n,r,a,o,e.textContent.trim())),i.projectArray[t].tasks.push(m(n,r,a,o,e.textContent.trim()))):i.projectArray[0].tasks.push(m(n,r,a,o,e.textContent.trim())),He.updateProjectInfo(i),document.getElementById("objective").value="",document.getElementById("description").value="",document.getElementById("priority").value="0",document.getElementById("date").value="";let l=i.projectArray[t].tasks.length-1,s=We.upload(l);document.getElementById("content").insertBefore(s,document.getElementById("taskButton"))}()}))},makeBtn:n,makeDiv:o,makeImg:a,makeX:r}})();Ke.buttonChange(),He.initialize(),Ke.navToggle(),Ke.activateModals(),Ke.addProject(),Ke.addTask(),console.log({testString:"This is working, along with Tailwind!"})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,