(()=>{"use strict";const e=e=>({projectName:e,tasks:[]}),t=(()=>{const t=[],n=[];return document.querySelectorAll("[data-project-name]").forEach((c=>{t.push(c.dataset.projectName);let a=e(c.dataset.projectName);n.push(a)})),{nameArray:t,projectArray:n}})();function n(e){e.forEach((e=>{let t=e.cloneNode(!0);e.parentNode.replaceChild(t,e)}))}const c=(()=>{const c=()=>{let e=document.querySelectorAll(".directory");e.forEach((t=>{t.addEventListener("click",(()=>{e.forEach((e=>{e.classList.contains("toggled")&&e.classList.remove("toggled")})),t.classList.add("toggled")}))}))};return{buttonChange:c,navToggle:()=>{const e=document.getElementsByClassName("toggle-button")[0],t=document.getElementById("nav"),n=document.getElementById("main");e.addEventListener("click",(()=>{t.classList.toggle("active"),n.classList.toggle("active")}))},activateModals:()=>{const e=document.querySelectorAll("[data-modal-target"),t=document.querySelectorAll("[data-close-button]"),n=document.getElementById("overlay");function c(e){null!=e&&(e.classList.remove("active"),n.classList.remove("active"))}e.forEach((e=>{e.addEventListener("click",(()=>{var t;null!=(t=document.querySelector(e.dataset.modalTarget))&&(t.classList.add("active"),n.classList.add("active"))}))})),n.addEventListener("click",(()=>{document.querySelectorAll(".modal-active").foreEach((e=>{c(e)}))})),t.forEach((e=>{e.addEventListener("click",(()=>{c(e.closest(".modal"))}))}))},addProject:()=>{document.getElementById("addProject").addEventListener("click",(a=>{a.preventDefault(),function(){const a=document.getElementById("name").value;document.getElementById("name").value="";let l=0,o=0;for(;l<t.nameArray.length;){if(t.nameArray[l]===a){o++;break}l++}if(0==o){let l=e(a);t.projectArray.push(l),console.log(t.projectArray);const o=document.getElementById("additionalProjects");t.nameArray.push(a);const r=function(e){const t=document.createElement("button");for(let n=0;n<e.length;n++)t.classList.add(e[n]);return t}(["hover:bg-[#cccccc]","rounded-md","w-full","py-2","flex","justify-between","items-center","h-12","px-1","directory"]),d=function(e){const t=new Image(20,20);t.src="/src/modules/project-image.png";for(let n=0;n<e.length;n++)t.classList.add(e[n]);return t}(["h-[1.3rem]","w-[1.3rem]","flex","justify-start","items-center","mx-4","box-content"]),s=function(e){const n=document.createElement("div");return n.textContent=e,n.dataset.projectName=e,n.dataset.id=t.nameArray.length-1,n}(a),i=function(e){const t=document.createElement("div");t.innerHTML="&times;";for(let n=0;n<e.length;n++)t.classList.add(e[n]);return t}(["ml-4","z-10","flex","justify-end","killbill"]);r.append(d),r.append(s),r.append(i),o.insertBefore(r,document.getElementById("addBefore")),n(document.querySelectorAll(".directory")),c(),n(document.querySelectorAll(".killbill")),document.querySelectorAll(".killbill").forEach((e=>{e.addEventListener("click",(()=>{let n=e.previousElementSibling.dataset.id;t.nameArray.splice(n,1),t.projectArray.splice(n,1),e.parentElement.remove()}))}))}}()}))},addTask:()=>{document.getElementById("addTask").addEventListener("click",(e=>{e.preventDefault(),function(){let e=function(e){let n=0;for(let c=0;c<t.nameArray.length;c++)return t.nameArray[c]===e.textContent&&(n=c),n}(document.getElementById("title")),n=document.getElementById("objective").value,c=document.getElementById("description").value,a=document.getElementById("priority").value,l=document.getElementById("date").value;t.projectArray[e].tasks.push(((e,t,n,c)=>({objective:e,desc:t,priority:n,date:c}))(n,c,a,l)),console.log(t.projectArray[e].tasks),document.getElementById("objective").value="",document.getElementById("description").value="",document.getElementById("priority").value="0",document.getElementById("date").value=""}()}))}}})();console.log({testString:"This is working, along with Tailwind!"}),c.buttonChange(),c.navToggle(),c.activateModals(),c.addProject(),c.addTask()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,