(()=>{"use strict";const e=e=>({projectName:e,tasks:[]}),t=function(e="none",t="",r=""){let n,o=document.createElement("div");if(""!=e){n=e.split(" ");for(let e=0;e<n.length;e++)o.classList.add(n[e])}return null!=t&&(o.id=t),null!=r&&(o.textContent=r),o},r=function(e="",t="",r=""){let n=e.split(" "),o=document.createElement("button");if(""!=e)for(let e=0;e<n.length;e++)o.classList.add(n[e]);return o.id=t,o.textContent=r,o},n=function(e){let t="h-6 w-6 cursor-pointer hover:-translate-y-1 hover:scale-110 transition ease-in-out duration-300".split(" "),r=document.createElement("img");r.src="/src/modules/edit.svg",r.dataset.modalTarget="#"+e+"otherModal";for(let e=0;e<t.length;e++)r.classList.add(t[e]);return r},o=function(e,t){let r="min-h-[20px] min-w-[20px] inline-block bg-white border-[3px] rounded-[50%] hover:bg-slate-300 mx-3".split(" "),n=document.createElement("span");for(let e=0;e<r.length;e++)n.classList.add(r[e]);return 0==t?n.classList.add("border-black"):1==t?n.classList.add("border-blue-500"):2==t?n.classList.add("border-orange-500"):3==t&&n.classList.add("border-red-500"),n.dataset.id=e,n},a=function(e){let t="h-[2px] bg-slate-700 w-[12px] block".split(" "),r=document.createElement("span");for(let e=0;e<t.length;e++)r.classList.add(t[e]);return e?r.classList.add("translate-y-[2px]"):r.classList.add("rotate-[90deg]"),r},l=function(e){let t=document.createElement("img");t.src="/src/modules/trash.svg",t.dataset.id=e;let r="h-6 w-6 cursor-pointer trash hover:-translate-y-1 hover:scale-110 transition ease-in-out duration-300".split(" ");for(let e=0;e<r.length;e++)t.classList.add(r[e]);return t},s=function(e){let t=e+"form",r=document.createElement("form");return r.setAttribute("id",t),r.setAttribute("action",""),r},c=function(e,t){let r=e+t,n=document.createElement("label");return n.setAttribute("for",r),n.textContent=t[0].toUpperCase()+t.slice(1,t.length)+":",n},d=function(e,t,r,n){let o=n.split(" "),a=document.createElement("input");for(let e=0;e<o.length;e++)a.classList.add(o[e]);let l=t+r;return a.setAttribute("type",e),a.setAttribute("id",l),"text"===e&&a.setAttribute("required",""),a},i=function(e,t){let r=t.split(" "),n=document.createElement("textarea");n.setAttribute("required","");let o=e+"description";for(let e=0;e<r.length;e++)n.classList.add(r[e]);return n.setAttribute("id",o),n.cols="5",n.rows="5",n},u=function(e,t){let r=t.split(" "),n=document.createElement("select"),o=e+"priority";n.setAttribute("id",o);for(let e=0;e<r.length;e++)n.classList.add(r[e]);let a=document.createElement("option");a.value="0",a.textContent="None";let l=document.createElement("option");l.value="1",l.textContent="Low";let s=document.createElement("option");s.value="2",s.textContent="Medium";let c=document.createElement("option");return c.value="3",c.textContent="High",n.append(a,l,s,c),n},m=(e,t,r,n,o)=>({objective:e,desc:t,priority:r,date:n,project:o});function p(e){let t=0;for(let r=0;r<j.getProjectItem().nameArray.length;r++)j.getProjectItem().nameArray[r]==e&&(t=r);return t}const g=(()=>{function e(e){null!=e&&(e.classList.remove("active"),overlay.classList.remove("active"))}return{taskModal:n=>{let o=t("modal break-normal",n+"Modal"),a=t("modal-header"),l=r("close-button","","");l.innerHTML="&times;",l.dataset.closeButton,l.addEventListener("click",(()=>{e(l.closest(".modal"))})),a.append(t("title","","Task Details"),l),o.append(a);let s=t("modal-body"),c=p(document.getElementById("title").textContent),d=j.getProjectItem().projectArray[c].projectName+" / "+j.getProjectItem().projectArray[c].tasks[n].project;return s.append(t("","","Project: "+d)),s.append(t("","","Title: "+j.getProjectItem().projectArray[c].tasks[n].objective)),s.append(t("","","Description: "+j.getProjectItem().projectArray[c].tasks[n].desc)),s.append(t("","","Due Date: "+j.getProjectItem().projectArray[c].tasks[n].date)),s.append(t("","","Priority: "+j.getProjectItem().projectArray[c].tasks[n].priority)),o.append(s),o},editModal:n=>{let o=t("modal",n+"otherModal"),l=t("modal-header"),g=r("close-button");g.innerHTML="&times;",g.dataset.closeButton,g.addEventListener("click",(()=>{e(g.closest(".modal"))})),l.append(t("title","","Edit Task"),g),o.append(l);let f=t("modal-body"),v=s(n),h=t("flex flex-col gap-2"),b=t("flex flex-col"),k=c(n,"objective"),E=d("text",n,"objective","bg-white border-[1px] border-black h-[2em] focus:border-[2px] focus:border-[#2994b2] focus:outline-none");b.append(k,E),h.append(b);let I=t("flex flex-col"),A=c(n,"description"),B=i(n,"bg-white border-[1px] border-black focus:border-[2px] focus:border-[#2994b2] focus:outline-none");I.append(A,B),h.append(I);let x=t("flex justify-around"),N=t("flex justify-start gap-12"),L=t("flex flex-col"),w=c(n,"priority"),D=u(n,"bg-white border-[1px] border-black h-7 focus:border-[2px] focus:border-[#2994b2] focus:outline-none");L.append(w,D),N.append(L);let T=t("flex flex-col"),C=c(n,"date"),M=d("date",n,"date","bg-white border-[1px] border-black focus:border-[2px] focus:border-[#2994b2] focus:outline-none");T.append(C,M),N.append(T),x.append(N);let S=r("flex text-xl my-2 items-center");S.setAttribute("type","submit"),S.setAttribute("form","taskForm");let P=p(document.getElementById("title").innerHTML);S.addEventListener("click",(e=>{const t=document.getElementById("overlay");e.preventDefault();let r=n+"objective",o=n+"description",a=n+"priority",l=n+"date",s=document.getElementById(r).value,c=document.getElementById(o).value,d=document.getElementById(a).value,i=document.getElementById(l).value,u=document.getElementById("title").innerHTML,p=j.getProjectItem();if(0!=P){for(let e=0;e<p.projectArray[0].tasks.length;e++)p.projectArray[0].tasks[e].objective==p.projectArray[P].tasks[n].objective&&p.projectArray[0].tasks.splice(e,1,m(s,c,d,i,u));p.projectArray[P].tasks.splice(n,1,m(s,c,d,i,u))}else p.projectArray[P].tasks.splice(n,1,m(s,c,d,i,u));document.getElementById(r).value="",document.getElementById(o).value="",document.getElementById(a).value="0",document.getElementById(l).value="",j.updateProjectInfo(p);let g=document.getElementById("content");for(;g.childNodes.length>4;)g.removeChild(g.firstChild);let f=j.getProjectItem();if(f.projectArray[P].tasks.length>0)for(let e=0;e<f.projectArray[P].tasks.length;e++){let t=y.upload(e);document.getElementById("content").insertBefore(t,document.getElementById("taskButton"))}t.classList.remove("active")}));let H=t("mx-2 relative"),U=a(!0),q=a(!1),F=t("","","Add");return H.append(U,q),S.append(H,F),x.append(S),h.append(x),v.append(h),f.append(v),o.append(f),o}}})(),f=(()=>{let e=0;return{kill:t=>{let r="task"+t,n=p(document.getElementById("title").innerHTML);document.getElementById("content").removeChild(document.getElementById(r));let o=j.getProjectItem();if(0!=n){for(let e=0;e<o.projectArray[0].tasks.length;e++)o.projectArray[0].tasks[e].objective==o.projectArray[n].tasks[t].objective&&o.projectArray[0].tasks.splice(e,1);o.projectArray[n].tasks.splice(t-e,1)}else o.projectArray[n].tasks.splice(t-e,1);j.updateProjectInfo(o),0==o.projectArray[n].tasks.length?e=0:e++},reptitions:e}})(),y=(()=>{function e(e){null!=e&&(e.classList.add("active"),overlay.classList.add("active"))}return{upload:a=>{let s=t("","task"+a),c=t("rounded-[10px] flex justify-between hover:bg-[#cccccc] min-h-[3rem] items-center hover:relative hover:bottom-1 hover:shadow-xl flex-col lg:flex-row py-2"),d=p(document.getElementById("title").innerHTML),i=t("flex items-start justify-start lg:justify-start lg:items-center w-full"),u=o(a,j.getProjectItem().projectArray[d].tasks[a].priority);u.addEventListener("click",(()=>{f.kill(a)}));let m=j.getProjectItem().projectArray[d].tasks[a].objective,y=t("","",m);i.append(u,y),c.append(i);let v=t("flex gap-6 mr-8"),h=t(),b=r("hover:-translate-y-1 hover:scale-110 transition ease-in-out duration-300","","Details");b.dataset.modalTarget=a+"Modal",b.addEventListener("click",(()=>{e(document.getElementById(b.dataset.modalTarget))}));let k=g.taskModal(a);h.append(b,k),v.append(h);let E=n(a);E.dataset.modalTarget=a+"otherModal",E.addEventListener("click",(()=>{e(document.getElementById(E.dataset.modalTarget))}));let I=g.editModal(a);v.append(E,I);let A=l(a);return A.addEventListener("click",(()=>{f.kill(a)})),v.append(A),c.append(v),s.append(c),s}}})();function v(e){e.forEach((e=>{let t=e.cloneNode(!0);e.parentNode.replaceChild(t,e)}))}function h(){v(document.querySelectorAll(".killbill")),document.querySelectorAll(".killbill").forEach((e=>{e.addEventListener("click",(()=>{e.parentElement.classList.add("gettingDeleted");let t=p(e.previousElementSibling.dataset.projectName),r=j.getProjectItem();r.nameArray.splice(t,1),r.projectArray.splice(t,1);let n=e.previousElementSibling.dataset.projectName.trim();if(r.projectArray[0].tasks.length>0)for(let e=0;e<r.projectArray[0].tasks.length;e++)r.projectArray[0].tasks[e].project==n&&(r.projectArray[0].tasks.splice(e,1),e-=1);j.updateProjectInfo(r),e.parentElement.remove()}))}))}const j=(()=>{const e=e=>{localStorage.setItem("projectInfo",JSON.stringify(e))},t=()=>JSON.parse(localStorage.getItem("projectInfo"));return{updateProjectInfo:e,getProjectItem:t,initialize:()=>{let r=t();if(e(r),0!=t().projectArray[0].tasks.length)for(let e=0;e<t().projectArray[0].tasks.length;e++){let t=y.upload(e);document.getElementById("content").insertBefore(t,document.getElementById("taskButton"))}(()=>{for(let e=3;e<t().nameArray.length;e++){let r=t().nameArray[e];const n=document.getElementById("additionalProjects"),o=V.makeBtn(["hover:bg-[#cccccc]","rounded-md","w-full","py-2","flex","justify-between","items-center","h-12","px-1","directory"]),a=V.makeImg(["h-[1.3rem]","w-[1.3rem]","flex","justify-start","items-center","mx-4","box-content"]),l=V.makeDiv(r);l.classList.add("closest");const s=V.makeX(["ml-4","z-10","flex","justify-end","killbill"]);o.append(a),o.append(l),o.append(s),n.insertBefore(o,document.getElementById("addBefore")),v(document.querySelectorAll(".directory")),V.buttonChange(),h()}})()}}})(),b=(()=>{const t=[],r=[];return document.querySelectorAll("[data-project-name]").forEach((n=>{t.push(n.dataset.projectName);let o=e(n.dataset.projectName);r.push(o)})),{nameArray:t,projectArray:r}})();function k(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function E(e){return E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},E(e)}function I(e){k(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===E(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function A(e,t){k(2,arguments);var r=I(e),n=I(t);return r.getTime()<n.getTime()}Math.pow(10,8);var B=36e5;function x(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function N(e,t){var r;k(1,arguments);var n=x(null!==(r=null==t?void 0:t.additionalDigits)&&void 0!==r?r:2);if(2!==n&&1!==n&&0!==n)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var o,a=C(e);if(a.date){var l=M(a.date,n);o=S(l.restDateString,l.year)}if(!o||isNaN(o.getTime()))return new Date(NaN);var s,c=o.getTime(),d=0;if(a.time&&(d=H(a.time),isNaN(d)))return new Date(NaN);if(!a.timezone){var i=new Date(c+d),u=new Date(0);return u.setFullYear(i.getUTCFullYear(),i.getUTCMonth(),i.getUTCDate()),u.setHours(i.getUTCHours(),i.getUTCMinutes(),i.getUTCSeconds(),i.getUTCMilliseconds()),u}return s=q(a.timezone),isNaN(s)?new Date(NaN):new Date(c+d+s)}var L={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},w=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,D=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,T=/^([+-])(\d{2})(?::?(\d{2}))?$/;function C(e){var t,r={},n=e.split(L.dateTimeDelimiter);if(n.length>2)return r;if(/:/.test(n[0])?t=n[0]:(r.date=n[0],t=n[1],L.timeZoneDelimiter.test(r.date)&&(r.date=e.split(L.timeZoneDelimiter)[0],t=e.substr(r.date.length,e.length))),t){var o=L.timezone.exec(t);o?(r.time=t.replace(o[1],""),r.timezone=o[1]):r.time=t}return r}function M(e,t){var r=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),n=e.match(r);if(!n)return{year:NaN,restDateString:""};var o=n[1]?parseInt(n[1]):null,a=n[2]?parseInt(n[2]):null;return{year:null===a?o:100*a,restDateString:e.slice((n[1]||n[2]).length)}}function S(e,t){if(null===t)return new Date(NaN);var r=e.match(w);if(!r)return new Date(NaN);var n=!!r[4],o=P(r[1]),a=P(r[2])-1,l=P(r[3]),s=P(r[4]),c=P(r[5])-1;if(n)return function(e,t,r){return t>=1&&t<=53&&r>=0&&r<=6}(0,s,c)?function(e,t,r){var n=new Date(0);n.setUTCFullYear(e,0,4);var o=7*(t-1)+r+1-(n.getUTCDay()||7);return n.setUTCDate(n.getUTCDate()+o),n}(t,s,c):new Date(NaN);var d=new Date(0);return function(e,t,r){return t>=0&&t<=11&&r>=1&&r<=(F[t]||(Y(e)?29:28))}(t,a,l)&&function(e,t){return t>=1&&t<=(Y(e)?366:365)}(t,o)?(d.setUTCFullYear(t,a,Math.max(o,l)),d):new Date(NaN)}function P(e){return e?parseInt(e):1}function H(e){var t=e.match(D);if(!t)return NaN;var r=U(t[1]),n=U(t[2]),o=U(t[3]);return function(e,t,r){return 24===e?0===t&&0===r:r>=0&&r<60&&t>=0&&t<60&&e>=0&&e<25}(r,n,o)?r*B+6e4*n+1e3*o:NaN}function U(e){return e&&parseFloat(e.replace(",","."))||0}function q(e){if("Z"===e)return 0;var t=e.match(T);if(!t)return 0;var r="+"===t[1]?-1:1,n=parseInt(t[2]),o=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,o)?r*(n*B+6e4*o):NaN}var F=[31,null,31,30,31,30,31,31,30,31,30,31];function Y(e){return e%400==0||e%4==0&&e%100!=0}function z(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}function Z(e){k(1,arguments);var t=I(e);return t.setHours(0,0,0,0),t}var O=864e5;function $(e,t){k(2,arguments);var r=Z(e),n=Z(t),o=r.getTime()-z(r),a=n.getTime()-z(n);return Math.round((o-a)/O)}function J(e,t){k(2,arguments);var r=I(e),n=x(t);return isNaN(n)?new Date(NaN):n?(r.setDate(r.getDate()+n),r):r}function R(e,t){k(2,arguments);var r=I(e),n=x(t);if(isNaN(n))return new Date(NaN);if(!n)return r;var o=r.getDate(),a=new Date(r.getTime());a.setMonth(r.getMonth()+n+1,0);var l=a.getDate();return o>=l?a:(r.setFullYear(a.getFullYear(),a.getMonth(),o),r)}function X(e){return X="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},X(e)}function G(e,t){if(k(2,arguments),!t||"object"!==X(t))return new Date(NaN);var r=t.years?x(t.years):0,n=t.months?x(t.months):0,o=t.weeks?x(t.weeks):0,a=t.days?x(t.days):0,l=t.hours?x(t.hours):0,s=t.minutes?x(t.minutes):0,c=t.seconds?x(t.seconds):0,d=I(e),i=n||r?R(d,n+12*r):d,u=a||o?J(i,a+7*o):i,m=s+60*l,p=c+60*m,g=1e3*p,f=new Date(u.getTime()+g);return f}const W=()=>{let e=[],t=j.getProjectItem();for(let r=1;r<t.projectArray.length;r++)if(1!=r&&0!=t.projectArray[r].tasks.length)for(let n=0;n<t.projectArray[r].tasks.length;n++)""!=t.projectArray[r].tasks[n].date&&A(N(t.projectArray[r].tasks[n].date),function(e){k(1,arguments);var t=I(e);return t.setHours(23,59,59,999),t}(Date.now()))&&e.push(t.projectArray[r].tasks[n]);return e},K=()=>{let e=[],t=j.getProjectItem();for(let s=1;s<t.projectArray.length;s++)if(2!=s&&0!=t.projectArray[s].tasks.length)for(let c=0;c<t.projectArray[s].tasks.length;c++)""!=t.projectArray[s].tasks[c].date&&$(G((r=void 0,void 0,void 0,void 0,l=void 0,n=(r=new Date).getFullYear(),o=r.getMonth(),a=r.getDate(),(l=new Date(0)).setFullYear(n,o,a+1),l.setHours(0,0,0,0),l),{days:7}),N(t.projectArray[s].tasks[c].date))<=7&&e.push(t.projectArray[s].tasks[c]);var r,n,o,a,l;return e},Q=e=>{f.reptitions=0;let t=p(document.getElementById("title").innerHTML.trim()),r=document.getElementById("content");for(;r.childNodes.length>4;)r.removeChild(r.firstChild);if(document.getElementById("taskButton").classList.remove("hidden"),!e.classList.contains("gettingDeleted")){let r=j.getProjectItem();if(e.childNodes.length>3&&"Inbox"!=e.childNodes[3].innerHTML){if("Today"==e.childNodes[3].innerHTML){if(document.getElementById("taskButton").classList.add("hidden"),r.projectArray[1].tasks=W(),j.updateProjectInfo(r),r.projectArray[1].tasks.length>0)for(let e=0;e<r.projectArray[1].tasks.length;e++){let t=y.upload(e);document.getElementById("content").insertBefore(t,document.getElementById("taskButton"))}}else if("Upcoming"==e.childNodes[3].innerHTML&&(document.getElementById("taskButton").classList.add("hidden"),r.projectArray[2].tasks=K(),j.updateProjectInfo(r),r.projectArray[2].tasks.length>0))for(let e=0;e<r.projectArray[2].tasks.length;e++){let t=y.upload(e);document.getElementById("content").insertBefore(t,document.getElementById("taskButton"))}}else if(r.projectArray[t].tasks.length>0){document.getElementById("taskButton");for(let e=0;e<r.projectArray[t].tasks.length;e++){let t=y.upload(e);document.getElementById("content").insertBefore(t,document.getElementById("taskButton"))}}}},V=(()=>{const t=()=>{let e=document.querySelectorAll(".directory");for(let t=0;t<e.length;t++)e[t].addEventListener("click",(()=>{e.forEach((e=>{e.classList.contains("toggled")&&e.classList.remove("toggled")}));const r=document.getElementById("title");let n,o=e[t].childNodes;n=o.length>3?o[3].textContent:o[1].textContent,e[t].classList.add("toggled"),r.textContent=n}));document.querySelectorAll(".directory").forEach((e=>{e.addEventListener("click",(()=>{Q(e)}))}))};function r(e){const t=document.createElement("button");for(let r=0;r<e.length;r++)t.classList.add(e[r]);return t}function n(e){const t=document.createElement("div");t.innerHTML="&times;";for(let r=0;r<e.length;r++)t.classList.add(e[r]);return t}function o(e){const t=new Image(20,20);t.src="/src/modules/project-image.png";for(let r=0;r<e.length;r++)t.classList.add(e[r]);return t}function a(e){const t=document.createElement("div");return t.textContent=e,t.dataset.projectName=e,t.dataset.id=b.nameArray.length-1,t}return{buttonChange:t,navToggle:()=>{const e=document.getElementsByClassName("toggle-button")[0],t=document.getElementById("nav"),r=document.getElementById("main");e.addEventListener("click",(()=>{t.classList.toggle("active"),r.classList.toggle("active")}))},activateModals:()=>{const e=document.querySelectorAll("[data-modal-target"),t=document.querySelectorAll("[data-close-button]"),r=document.getElementById("overlay");e.forEach((e=>{e.addEventListener("click",(()=>{var t;null!=(t=document.querySelector(e.dataset.modalTarget))&&(t.classList.add("active"),r.classList.add("active"))}))})),t.forEach((e=>{e.addEventListener("click",(()=>{var t;null!=(t=e.closest(".modal"))&&(t.classList.remove("active"),r.classList.remove("active"))}))}))},addProject:()=>{document.getElementById("addProject").addEventListener("click",(l=>{l.preventDefault(),function(){const l=document.getElementById("name").value.trim();document.getElementById("name").value="";let s=0,c=0;for(;s<j.getProjectItem().nameArray.length;){if(j.getProjectItem().nameArray[s]===l){c++;break}s++}if(0==c){let s=e(l),c=j.getProjectItem();c.projectArray.push(s),c.nameArray.push(l);const d=document.getElementById("additionalProjects"),i=r(["hover:bg-[#cccccc]","rounded-md","w-full","py-2","flex","justify-between","items-center","h-12","px-1","directory"]),u=o(["h-[1.3rem]","w-[1.3rem]","flex","justify-start","items-center","mx-4","box-content"]),m=a(l);m.classList.add("closest");const p=n(["ml-4","z-10","flex","justify-end","killbill"]);i.append(u),i.append(m),i.append(p),d.insertBefore(i,document.getElementById("addBefore")),v(document.querySelectorAll(".directory")),t(),h(),j.updateProjectInfo(c)}}()}))},addTask:()=>{document.getElementById("addTask").addEventListener("click",(e=>{e.preventDefault(),function(){const e=document.getElementById("title");let t=p(e.innerHTML),r=document.getElementById("objective").value,n=document.getElementById("description").value,o=document.getElementById("priority").value,a=document.getElementById("date").value,l=j.getProjectItem();"Inbox"!=e.textContent?(l.projectArray[0].tasks.push(m(r,n,o,a,e.textContent.trim())),l.projectArray[t].tasks.push(m(r,n,o,a,e.textContent.trim()))):l.projectArray[0].tasks.push(m(r,n,o,a,e.textContent.trim())),j.updateProjectInfo(l),document.getElementById("objective").value="",document.getElementById("description").value="",document.getElementById("priority").value="0",document.getElementById("date").value="";let s=l.projectArray[t].tasks.length-1,c=y.upload(s);document.getElementById("content").insertBefore(c,document.getElementById("taskButton"))}()}))},makeBtn:r,makeDiv:a,makeImg:o,makeX:n}})();V.buttonChange(),j.initialize(),V.navToggle(),V.activateModals(),V.addProject(),V.addTask(),console.log({testString:"This is working, along with Tailwind!"})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,