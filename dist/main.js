(()=>{"use strict";const e=e=>({projectName:e,tasks:[]}),t=function(e="none",t="",n=""){let l,o=document.createElement("div");if(""!=e){l=e.split(" ");for(let e=0;e<l.length;e++)o.classList.add(l[e])}return null!=t&&(o.id=t),null!=n&&(o.textContent=n),o},n=function(e="",t="",n=""){let l=e.split(" "),o=document.createElement("button");if(""!=e)for(let e=0;e<l.length;e++)o.classList.add(l[e]);return o.id=t,o.textContent=n,o},l=function(e){let t="h-6 w-6 cursor-pointer hover:-translate-y-1 hover:scale-110 transition ease-in-out duration-300".split(" "),n=document.createElement("img");n.src="/src/modules/edit.svg",n.dataset.modalTarget="#"+e+"otherModal";for(let e=0;e<t.length;e++)n.classList.add(t[e]);return n},o=function(e){let t="min-h-[20px] min-w-[20px] inline-block bg-white border-red-500 border-[3px] rounded-[50%] hover:bg-slate-300 mx-3".split(" "),n=document.createElement("span");for(let e=0;e<t.length;e++)parseInt.classList.add(t[e]);return n.dataset.id=e,n},a=function(e){let t="h-[2px] bg-slate-700 w-[12px] block".split(" "),n=document.createElement("span");for(let e=0;e<t.length;e++)n.classList.add(t[e]);return e?n.classList.add("translate-y-[2px]"):n.classList.add("rotate-[90deg]"),n},r=function(e){let t=document.createElement("img");t.src="/src/modules/trash.svg",t.dataset.id=e;let n="h-6 w-6 cursor-pointer trash hover:-translate-y-1 hover:scale-110 transition ease-in-out duration-300".split(" ");for(let e=0;e<n.length;e++)t.classList.add(n[e]);return t},d=function(e){let t=e+"form",n=document.createElement("form");return n.setAttribute("id",t),n.setAttribute("action",""),n},c=function(e,t){let n=e+t,l=document.createElement("label");return l.setAttribute("for",n),l.textContent=t[0].toUpperCase()+t.slice(1,t.length)+":",l},s=function(e,t,n,l){let o=l.split(" "),a=document.createElement("input");for(let e=0;e<o.length;e++)a.classList.add(o[e]);let r=t+n;return a.setAttribute("type",e),a.setAttribute("id",r),"text"===e&&a.setAttribute("required",""),a},i=function(e,t){let n=t.split(" "),l=document.createElement("textarea");l.setAttribute("required","");for(let e=0;e<n.length;e++)l.classList.add(n[e]);return l.cols="5",l.rows="5",l},u=function(e,t){let n=t.split(" "),l=document.createElement("select"),o=e+"priority";l.setAttribute("id",o);for(let e=0;e<n.length;e++)l.classList.add(n[e]);let a=document.createElement("option");a.value="0",a.textContent="None";let r=document.createElement("option");r.value="1",r.textContent="Low";let d=document.createElement("option");d.value="2",d.textContent="Medium";let c=document.createElement("option");return c.value="3",c.textContent="High",l.append(a,r,d,c),l};function m(e){let t=0;for(let n=0;n<v.nameArray.length;n++)v.nameArray[n]==e&&(console.log("going"),t=n);return t}const p=(()=>{function e(e){null!=e&&(e.classList.remove("active"),overlay.classList.remove("active"))}return{taskModal:l=>{let o=t("modal",l+"Modal"),a=t("modal-header"),r=n("close-button","","");r.innerHTML="&times;",r.dataset.closeButton,r.addEventListener("click",(()=>{e(r.closest(".modal"))})),a.append(t("title","","Task Details"),r),o.append(a);let d,c=t("modal-body"),s=document.getElementById("title").textContent;for(let e=0;e<v.nameArray.length;e++)v.nameArray[e]==s&&(d=e,console.log("running"));return c.append(t("","","Title: "+s)),c.append(t("","","Description: "+v.projectArray[d].tasks[l].desc)),c.append(t("","","Due Date: "+v.projectArray[d].tasks[l].date)),c.append(t("","","Priority: "+v.projectArray[d].tasks[l].priority)),o.append(c),o},editModal:l=>{let o=t("modal",l+"otherModal"),r=t("modal-header"),p=n("close-button");p.innerHTML="&times;",p.dataset.closeButton,p.addEventListener("click",(()=>{e(p.closest(".modal"))})),r.append(t("title","","Edit Task"),p),o.append(r);let g=t("modal-body"),f=d(l),y=t("flex flex-col gap-2"),h=t("flex flex-col"),b=c(l,"objective"),E=s("text",l,"objective","bg-white border-[1px] border-black h-[2em] focus:border-[2px] focus:border-[#2994b2] focus:outline-none");h.append(b,E),y.append(h);let x=t("flex flex-col"),k=c(l,"description"),L=i(l,"bg-white border-[1px] border-black focus:border-[2px] focus:border-[#2994b2] focus:outline-none");x.append(k,L),y.append(x);let j=t("flex justify-around"),I=t("flex justify-start gap-12"),A=t("flex flex-col"),B=c(l,"priority"),w=u(l,"bg-white border-[1px] border-black h-7 focus:border-[2px] focus:border-[#2994b2] focus:outline-none");A.append(B,w),I.append(A);let T=t("flex flex-col"),C=c(l,"date"),M=s("date",l,"date","bg-white border-[1px] border-black focus:border-[2px] focus:border-[#2994b2] focus:outline-none");T.append(C,M),I.append(T),j.append(I);let S=n("flex text-xl my-2 items-center");S.setAttribute("type","submit"),S.setAttribute("form","taskForm");let q=m(document.getElementById("title").innerHTML);S.addEventListener("click",(()=>{let e=l+"objective",t=l+"desc",n=l+"priority",o=l+"date",a=document.getElementById(e).value,r=document.getElementById(t).value,d=document.getElementById(n).value,c=document.getElementById(o).value;v.projectArray[q].tasks.push(makeTask(a,r,d,c)),v.projectArray[0].tasks.push(makeTask(a,r,d,c)),document.getElementById(e).value="",document.getElementById(t).value="",document.getElementById(n).value="0",document.getElementById(o).value="",storage.updateProjectInfo(v)}));let N=t("mx-2 relative"),P=a(!0),D=a(!1),H=t("","","Add");return N.append(P,D),S.append(N,H),j.append(S),y.append(j),f.append(y),g.append(f),o.append(g),console.log(o),o}}})(),g=(e,a)=>{let d=t(),c=t("rounded-[10px] flex justify-between hover:bg-[#cccccc] min-h-[3rem] items-center hover:relative hover:bottom-1 hover:shadow-xl flex-col lg:flex-row py-2"),s=makeDiv("flex items-start justify-start lg:justify-start lg:items-center w-full"),i=o(e);i.addEventListener("click",void console.log("work in progress, will either use closest or see the title id contents!"));let u=t("","","Task Details");s.append(i,u),c.append(s);let m=t("flex gap-6 mr-8"),g=t(),f=n("hover:-translate-y-1 hover:scale-110 transition ease-in-out duration-300","","Details");f.dataset.modalTarget="#"+e+"Modal",f.addEventListener("click",(()=>{var e;null!=(e=document.querySelector(f.dataset.modalTarget))&&(e.classList.add("active"),overlay.classList.add("active"))}));let v=p.taskModal(e);g.append(f,v),m.append(g);let y=l(e);y.addEventListener("click",(()=>{var e;null!=(e=document.querySelector(y.dataset.modalTarget))&&(e.classList.remove("active"),overlay.classList.remove("active"))}));let h=p.editModal(e);m.append(y,h);let b=r(e);return m.append(b),c.append(m),d.append(c),d},f=(()=>{const e=e=>{localStorage.setItem("projectInfo",JSON.stringify(e))},t=()=>JSON.parse(localStorage.getItem("projectInfo"));return{updateProjectInfo:e,getProjectItem:t,initialize:()=>{let n=t();e(n),t().projectArray[0].tasks.length}}})(),v=(()=>{const t=[],n=[];return document.querySelectorAll("[data-project-name]").forEach((l=>{t.push(l.dataset.projectName);let o=e(l.dataset.projectName);n.push(o)})),{nameArray:t,projectArray:n}})();function y(e){e.forEach((e=>{let t=e.cloneNode(!0);e.parentNode.replaceChild(t,e)}))}const h=(e,t,n,l)=>({objective:e,desc:t,priority:n,date:l}),b=(()=>{const t=()=>{let e=document.querySelectorAll(".directory");for(let t=0;t<e.length;t++)e[t].addEventListener("click",(()=>{e.forEach((e=>{e.classList.contains("toggled")&&e.classList.remove("toggled")}));const n=document.getElementById("title");let l,o=e[t].childNodes;l=o.length>3?o[3].textContent:o[1].textContent,e[t].classList.add("toggled"),n.textContent=l}))};return{buttonChange:t,navToggle:()=>{const e=document.getElementsByClassName("toggle-button")[0],t=document.getElementById("nav"),n=document.getElementById("main");e.addEventListener("click",(()=>{t.classList.toggle("active"),n.classList.toggle("active")}))},activateModals:()=>{const e=document.querySelectorAll("[data-modal-target"),t=document.querySelectorAll("[data-close-button]"),n=document.getElementById("overlay");function l(e){null!=e&&(e.classList.remove("active"),n.classList.remove("active"))}e.forEach((e=>{e.addEventListener("click",(()=>{var t;null!=(t=document.querySelector(e.dataset.modalTarget))&&(t.classList.add("active"),n.classList.add("active"))}))})),n.addEventListener("click",(()=>{document.querySelectorAll(".modal-active").foreEach((e=>{l(e)}))})),t.forEach((e=>{e.addEventListener("click",(()=>{l(e.closest(".modal"))}))}))},addProject:()=>{document.getElementById("addProject").addEventListener("click",(n=>{n.preventDefault(),function(){const n=document.getElementById("name").value;document.getElementById("name").value="";let l=0,o=0;for(;l<v.nameArray.length;){if(v.nameArray[l]===n){o++;break}l++}if(0==o){let l=e(n);v.projectArray.push(l),v.nameArray.push(n),f.updateProjectInfo(v);const o=document.getElementById("additionalProjects"),a=function(e){const t=document.createElement("button");for(let n=0;n<e.length;n++)t.classList.add(e[n]);return t}(["hover:bg-[#cccccc]","rounded-md","w-full","py-2","flex","justify-between","items-center","h-12","px-1","directory"]),r=function(e){const t=new Image(20,20);t.src="/src/modules/project-image.png";for(let n=0;n<e.length;n++)t.classList.add(e[n]);return t}(["h-[1.3rem]","w-[1.3rem]","flex","justify-start","items-center","mx-4","box-content"]),d=function(e){const t=document.createElement("div");return t.textContent=e,t.dataset.projectName=e,t.dataset.id=v.nameArray.length-1,t}(n),c=function(e){const t=document.createElement("div");t.innerHTML="&times;";for(let n=0;n<e.length;n++)t.classList.add(e[n]);return t}(["ml-4","z-10","flex","justify-end","killbill"]);a.append(r),a.append(d),a.append(c),o.insertBefore(a,document.getElementById("addBefore")),y(document.querySelectorAll(".directory")),t(),y(document.querySelectorAll(".killbill")),document.querySelectorAll(".killbill").forEach((e=>{e.addEventListener("click",(()=>{let t=e.previousElementSibling.dataset.id;v.nameArray.splice(t,1),v.projectArray.splice(t,1),f.updateProjectInfo(v),e.parentElement.remove()}))}))}}()}))},addTask:()=>{document.getElementById("addTask").addEventListener("click",(e=>{e.preventDefault(),function(){const e=document.getElementById("title");console.log(e);let t=m(e.innerHTML);console.log(t);let n=document.getElementById("objective").value,l=document.getElementById("description").value,o=document.getElementById("priority").value,a=document.getElementById("date").value;v.projectArray[t].tasks.push(h(n,l,o,a)),v.projectArray[0].tasks.push(h(n,l,o,a)),document.getElementById("objective").value="",document.getElementById("description").value="",document.getElementById("priority").value="0",document.getElementById("date").value="";let r=projectArray[t].tasks.length-1,d=g(r);insertBefore(d,document.getElementById("taskButton")),f.updateProjectInfo(v)}()}))}}})();console.log({testString:"This is working, along with Tailwind!"}),b.buttonChange(),b.navToggle(),b.activateModals(),f.initialize(),b.addProject(),b.addTask(),p.editModal(1)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,