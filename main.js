(()=>{"use strict";const e=e=>({projectName:e,tasks:[]}),t=function(e="none",t="",n=""){let r,o=document.createElement("div");if(""!=e){r=e.split(" ");for(let e=0;e<r.length;e++)o.classList.add(r[e])}return null!=t&&(o.id=t),null!=n&&(o.textContent=n),o},n=function(e="",t="",n=""){let r=e.split(" "),o=document.createElement("button");if(""!=e)for(let e=0;e<r.length;e++)o.classList.add(r[e]);return o.id=t,o.textContent=n,o},r=function(e){let t="h-6 w-6 cursor-pointer hover:-translate-y-1 hover:scale-110 transition ease-in-out duration-300".split(" "),n=document.createElement("img");n.src="/src/modules/edit.svg",n.dataset.modalTarget="#"+e+"otherModal";for(let e=0;e<t.length;e++)n.classList.add(t[e]);return n},o=function(e,t){let n="min-h-[20px] min-w-[20px] inline-block bg-white border-[3px] rounded-[50%] hover:bg-slate-300 mx-3".split(" "),r=document.createElement("span");for(let e=0;e<n.length;e++)r.classList.add(n[e]);return 0==t?r.classList.add("border-black"):1==t?r.classList.add("border-blue-500"):2==t?r.classList.add("border-orange-500"):3==t&&r.classList.add("border-red-500"),r.dataset.id=e,r},l=function(e){let t="h-[2px] bg-slate-700 w-[12px] block".split(" "),n=document.createElement("span");for(let e=0;e<t.length;e++)n.classList.add(t[e]);return e?n.classList.add("translate-y-[2px]"):n.classList.add("rotate-[90deg]"),n},a=function(e){let t=document.createElement("img");t.src="/src/modules/trash.svg",t.dataset.id=e;let n="h-6 w-6 cursor-pointer trash hover:-translate-y-1 hover:scale-110 transition ease-in-out duration-300".split(" ");for(let e=0;e<n.length;e++)t.classList.add(n[e]);return t},c=function(e){let t=e+"form",n=document.createElement("form");return n.setAttribute("id",t),n.setAttribute("action",""),n},d=function(e,t){let n=e+t,r=document.createElement("label");return r.setAttribute("for",n),r.textContent=t[0].toUpperCase()+t.slice(1,t.length)+":",r},s=function(e,t,n,r){let o=r.split(" "),l=document.createElement("input");for(let e=0;e<o.length;e++)l.classList.add(o[e]);let a=t+n;return l.setAttribute("type",e),l.setAttribute("id",a),"text"===e&&l.setAttribute("required",""),l},i=function(e,t){let n=t.split(" "),r=document.createElement("textarea");r.setAttribute("required","");for(let e=0;e<n.length;e++)r.classList.add(n[e]);return r.cols="5",r.rows="5",r},m=function(e,t){let n=t.split(" "),r=document.createElement("select"),o=e+"priority";r.setAttribute("id",o);for(let e=0;e<n.length;e++)r.classList.add(n[e]);let l=document.createElement("option");l.value="0",l.textContent="None";let a=document.createElement("option");a.value="1",a.textContent="Low";let c=document.createElement("option");c.value="2",c.textContent="Medium";let d=document.createElement("option");return d.value="3",d.textContent="High",r.append(l,a,c,d),r};function u(e){let t=0;for(let n=0;n<h.getProjectItem().nameArray.length;n++)h.getProjectItem().nameArray[n]==e&&(t=n);return t}const p=(()=>{function e(e){null!=e&&(e.classList.remove("active"),overlay.classList.remove("active"))}return{taskModal:r=>{let o=t("modal break-normal",r+"Modal"),l=t("modal-header"),a=n("close-button","","");a.innerHTML="&times;",a.dataset.closeButton,a.addEventListener("click",(()=>{e(a.closest(".modal"))})),l.append(t("title","","Task Details"),a),o.append(l);let c=t("modal-body"),d=u(document.getElementById("title").textContent),s=h.getProjectItem().projectArray[d].projectName+" / "+h.getProjectItem().projectArray[d].tasks[r].project;return c.append(t("","","Project: "+s)),c.append(t("","","Title: "+h.getProjectItem().projectArray[d].tasks[r].objective)),c.append(t("","","Description: "+h.getProjectItem().projectArray[d].tasks[r].desc)),c.append(t("","","Due Date: "+h.getProjectItem().projectArray[d].tasks[r].date)),c.append(t("","","Priority: "+h.getProjectItem().projectArray[d].tasks[r].priority)),o.append(c),o},editModal:r=>{let o=t("modal",r+"otherModal"),a=t("modal-header"),p=n("close-button");p.innerHTML="&times;",p.dataset.closeButton,p.addEventListener("click",(()=>{e(p.closest(".modal"))})),a.append(t("title","","Edit Task"),p),o.append(a);let g=t("modal-body"),y=c(r),f=t("flex flex-col gap-2"),v=t("flex flex-col"),E=d(r,"objective"),b=s("text",r,"objective","bg-white border-[1px] border-black h-[2em] focus:border-[2px] focus:border-[#2994b2] focus:outline-none");v.append(E,b),f.append(v);let k=t("flex flex-col"),I=d(r,"description"),x=i(r,"bg-white border-[1px] border-black focus:border-[2px] focus:border-[#2994b2] focus:outline-none");k.append(I,x),f.append(k);let L=t("flex justify-around"),B=t("flex justify-start gap-12"),A=t("flex flex-col"),P=d(r,"priority"),w=m(r,"bg-white border-[1px] border-black h-7 focus:border-[2px] focus:border-[#2994b2] focus:outline-none");A.append(P,w),B.append(A);let C=t("flex flex-col"),T=d(r,"date"),M=s("date",r,"date","bg-white border-[1px] border-black focus:border-[2px] focus:border-[#2994b2] focus:outline-none");C.append(T,M),B.append(C),L.append(B);let S=n("flex text-xl my-2 items-center");S.setAttribute("type","submit"),S.setAttribute("form","taskForm");let N=u(document.getElementById("title").innerHTML);S.addEventListener("click",(()=>{let e=r+"objective",t=r+"desc",n=r+"priority",o=r+"date",l=document.getElementById(e).value,a=document.getElementById(t).value,c=document.getElementById(n).value,d=document.getElementById(o).value;j.projectArray[N].tasks.push(makeTask(l,a,c,d)),j.projectArray[0].tasks.push(makeTask(l,a,c,d)),document.getElementById(e).value="",document.getElementById(t).value="",document.getElementById(n).value="0",document.getElementById(o).value="",h.updateProjectInfo(j)}));let q=t("mx-2 relative"),D=l(!0),H=l(!1),z=t("","","Add");return q.append(D,H),S.append(q,z),L.append(S),f.append(L),y.append(f),g.append(y),o.append(g),o}}})(),g=(()=>{let e=0;return{kill:t=>{let n="task"+t,r=u(document.getElementById("title").innerHTML);document.getElementById("content").removeChild(document.getElementById(n));let o=h.getProjectItem();o.projectArray[r].tasks.splice(t-e,1),h.updateProjectInfo(o),0==o.projectArray[r].tasks.length?e=0:e++},reptitions:e}})(),y=e=>{let l=t("","task"+e),c=t("rounded-[10px] flex justify-between hover:bg-[#cccccc] min-h-[3rem] items-center hover:relative hover:bottom-1 hover:shadow-xl flex-col lg:flex-row py-2"),d=u(document.getElementById("title").innerHTML),s=t("flex items-start justify-start lg:justify-start lg:items-center w-full"),i=o(e,h.getProjectItem().projectArray[d].tasks[e].priority);i.addEventListener("click",(()=>{g.kill(e)}));let m=h.getProjectItem().projectArray[d].tasks[e].objective,y=t("","",m);s.append(i,y),c.append(s);let f=t("flex gap-6 mr-8"),v=t(),j=n("hover:-translate-y-1 hover:scale-110 transition ease-in-out duration-300","","Details");j.dataset.modalTarget=e+"Modal",j.addEventListener("click",(()=>{var e;null!=(e=document.getElementById(j.dataset.modalTarget))&&(e.classList.add("active"),overlay.classList.add("active"))}));let E=p.taskModal(e);v.append(j,E),f.append(v);let b=r(e);b.addEventListener("click",(()=>{var e;null!=(e=document.querySelector(b.dataset.modalTarget))&&(e.classList.remove("active"),overlay.classList.remove("active"))}));let k=p.editModal(e);f.append(b,k);let I=a(e);return I.addEventListener("click",(()=>{g.kill(e)})),f.append(I),c.append(f),l.append(c),l};function f(e){e.forEach((e=>{let t=e.cloneNode(!0);e.parentNode.replaceChild(t,e)}))}function v(){f(document.querySelectorAll(".killbill")),document.querySelectorAll(".killbill").forEach((e=>{e.addEventListener("click",(()=>{e.parentElement.classList.add("gettingDeleted");let t=u(e.previousElementSibling.dataset.projectName),n=h.getProjectItem();n.nameArray.splice(t,1),n.projectArray.splice(t,1);let r=e.previousElementSibling.dataset.projectName.trim();if(n.projectArray[0].tasks.length>0)for(let e=0;e<n.projectArray[0].tasks.length;e++)n.projectArray[0].tasks[e].project==r&&(n.projectArray[0].tasks.splice(e,1),e-=1);h.updateProjectInfo(n),e.parentElement.remove()}))}))}const h=(()=>{const e=e=>{localStorage.setItem("projectInfo",JSON.stringify(e))},t=()=>JSON.parse(localStorage.getItem("projectInfo"));return{updateProjectInfo:e,getProjectItem:t,initialize:()=>{let n=t();if(e(n),0!=t().projectArray[0].tasks.length)for(let e=0;e<t().projectArray[0].tasks.length;e++){let t=y(e);document.getElementById("content").insertBefore(t,document.getElementById("taskButton"))}(()=>{for(let e=3;e<t().nameArray.length;e++){let n=t().nameArray[e];const r=document.getElementById("additionalProjects"),o=k.makeBtn(["hover:bg-[#cccccc]","rounded-md","w-full","py-2","flex","justify-between","items-center","h-12","px-1","directory"]),l=k.makeImg(["h-[1.3rem]","w-[1.3rem]","flex","justify-start","items-center","mx-4","box-content"]),a=k.makeDiv(n);a.classList.add("closest");const c=k.makeX(["ml-4","z-10","flex","justify-end","killbill"]);o.append(l),o.append(a),o.append(c),r.insertBefore(o,document.getElementById("addBefore")),f(document.querySelectorAll(".directory")),k.buttonChange(),v()}})()}}})(),j=(()=>{const t=[],n=[];return document.querySelectorAll("[data-project-name]").forEach((r=>{t.push(r.dataset.projectName);let o=e(r.dataset.projectName);n.push(o)})),{nameArray:t,projectArray:n}})(),E=(e,t,n,r,o)=>({objective:e,desc:t,priority:n,date:r,project:o}),b=e=>{g.reptitions=0;let t=u(document.getElementById("title").innerHTML.trim()),n=document.getElementById("content");for(;n.childNodes.length>4;)n.removeChild(n.firstChild);if(!e.classList.contains("gettingDeleted")){let e=h.getProjectItem();if(e.projectArray[t].tasks.length>0)for(let n=0;n<e.projectArray[t].tasks.length;n++){let e=y(n);document.getElementById("content").insertBefore(e,document.getElementById("taskButton"))}}},k=(()=>{const t=()=>{let e=document.querySelectorAll(".directory");for(let t=0;t<e.length;t++)e[t].addEventListener("click",(()=>{e.forEach((e=>{e.classList.contains("toggled")&&e.classList.remove("toggled")}));const n=document.getElementById("title");let r,o=e[t].childNodes;r=o.length>3?o[3].textContent:o[1].textContent,e[t].classList.add("toggled"),n.textContent=r}));document.querySelectorAll(".directory").forEach((e=>{e.addEventListener("click",(()=>{b(e)}))}))};function n(e){const t=document.createElement("button");for(let n=0;n<e.length;n++)t.classList.add(e[n]);return t}function r(e){const t=document.createElement("div");t.innerHTML="&times;";for(let n=0;n<e.length;n++)t.classList.add(e[n]);return t}function o(e){const t=new Image(20,20);t.src="/src/modules/project-image.png";for(let n=0;n<e.length;n++)t.classList.add(e[n]);return t}function l(e){const t=document.createElement("div");return t.textContent=e,t.dataset.projectName=e,t.dataset.id=j.nameArray.length-1,t}return{buttonChange:t,navToggle:()=>{const e=document.getElementsByClassName("toggle-button")[0],t=document.getElementById("nav"),n=document.getElementById("main");e.addEventListener("click",(()=>{t.classList.toggle("active"),n.classList.toggle("active")}))},activateModals:()=>{const e=document.querySelectorAll("[data-modal-target"),t=document.querySelectorAll("[data-close-button]"),n=document.getElementById("overlay");e.forEach((e=>{e.addEventListener("click",(()=>{var t;null!=(t=document.querySelector(e.dataset.modalTarget))&&(t.classList.add("active"),n.classList.add("active"))}))})),t.forEach((e=>{e.addEventListener("click",(()=>{var t;null!=(t=e.closest(".modal"))&&(t.classList.remove("active"),n.classList.remove("active"))}))}))},addProject:()=>{document.getElementById("addProject").addEventListener("click",(a=>{a.preventDefault(),function(){const a=document.getElementById("name").value.trim();document.getElementById("name").value="";let c=0,d=0;for(;c<h.getProjectItem().nameArray.length;){if(h.getProjectItem().nameArray[c]===a){d++;break}c++}if(0==d){let c=e(a),d=h.getProjectItem();d.projectArray.push(c),d.nameArray.push(a);const s=document.getElementById("additionalProjects"),i=n(["hover:bg-[#cccccc]","rounded-md","w-full","py-2","flex","justify-between","items-center","h-12","px-1","directory"]),m=o(["h-[1.3rem]","w-[1.3rem]","flex","justify-start","items-center","mx-4","box-content"]),u=l(a);u.classList.add("closest");const p=r(["ml-4","z-10","flex","justify-end","killbill"]);i.append(m),i.append(u),i.append(p),s.insertBefore(i,document.getElementById("addBefore")),f(document.querySelectorAll(".directory")),t(),v(),h.updateProjectInfo(d)}}()}))},addTask:()=>{document.getElementById("addTask").addEventListener("click",(e=>{e.preventDefault(),function(){const e=document.getElementById("title");let t=u(e.innerHTML),n=document.getElementById("objective").value,r=document.getElementById("description").value,o=document.getElementById("priority").value,l=document.getElementById("date").value,a=h.getProjectItem();"Inbox"!=e.textContent?(a.projectArray[0].tasks.push(E(n,r,o,l,e.textContent.trim())),a.projectArray[t].tasks.push(E(n,r,o,l,e.textContent.trim()))):a.projectArray[0].tasks.push(E(n,r,o,l,e.textContent.trim())),h.updateProjectInfo(a),document.getElementById("objective").value="",document.getElementById("description").value="",document.getElementById("priority").value="0",document.getElementById("date").value="";let c=a.projectArray[t].tasks.length-1,d=y(c);document.getElementById("content").insertBefore(d,document.getElementById("taskButton"))}()}))},makeBtn:n,makeDiv:l,makeImg:o,makeX:r}})();k.buttonChange(),h.initialize(),k.navToggle(),k.activateModals(),k.addProject(),k.addTask(),console.log({testString:"This is working, along with Tailwind!"})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,