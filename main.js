(()=>{"use strict";const e=e=>({projectName:e,tasks:[]}),t=function(e="none",t="",n=""){let o,r=document.createElement("div");if(""!=e){o=e.split(" ");for(let e=0;e<o.length;e++)r.classList.add(o[e])}return null!=t&&(r.id=t),null!=n&&(r.textContent=n),r},n=function(e="",t="",n=""){let o=e.split(" "),r=document.createElement("button");if(""!=e)for(let e=0;e<o.length;e++)r.classList.add(o[e]);return r.id=t,r.textContent=n,r},o=function(e){let t="h-6 w-6 cursor-pointer hover:-translate-y-1 hover:scale-110 transition ease-in-out duration-300".split(" "),n=document.createElement("img");n.src="/src/modules/edit.svg",n.dataset.modalTarget="#"+e+"otherModal";for(let e=0;e<t.length;e++)n.classList.add(t[e]);return n},r=function(e){let t="min-h-[20px] min-w-[20px] inline-block bg-white border-red-500 border-[3px] rounded-[50%] hover:bg-slate-300 mx-3".split(" "),n=document.createElement("span");for(let e=0;e<t.length;e++)n.classList.add(t[e]);return n.dataset.id=e,n},l=function(e){let t="h-[2px] bg-slate-700 w-[12px] block".split(" "),n=document.createElement("span");for(let e=0;e<t.length;e++)n.classList.add(t[e]);return e?n.classList.add("translate-y-[2px]"):n.classList.add("rotate-[90deg]"),n},a=function(e){let t=document.createElement("img");t.src="/src/modules/trash.svg",t.dataset.id=e;let n="h-6 w-6 cursor-pointer trash hover:-translate-y-1 hover:scale-110 transition ease-in-out duration-300".split(" ");for(let e=0;e<n.length;e++)t.classList.add(n[e]);return t},c=function(e){let t=e+"form",n=document.createElement("form");return n.setAttribute("id",t),n.setAttribute("action",""),n},d=function(e,t){let n=e+t,o=document.createElement("label");return o.setAttribute("for",n),o.textContent=t[0].toUpperCase()+t.slice(1,t.length)+":",o},s=function(e,t,n,o){let r=o.split(" "),l=document.createElement("input");for(let e=0;e<r.length;e++)l.classList.add(r[e]);let a=t+n;return l.setAttribute("type",e),l.setAttribute("id",a),"text"===e&&l.setAttribute("required",""),l},i=function(e,t){let n=t.split(" "),o=document.createElement("textarea");o.setAttribute("required","");for(let e=0;e<n.length;e++)o.classList.add(n[e]);return o.cols="5",o.rows="5",o},m=function(e,t){let n=t.split(" "),o=document.createElement("select"),r=e+"priority";o.setAttribute("id",r);for(let e=0;e<n.length;e++)o.classList.add(n[e]);let l=document.createElement("option");l.value="0",l.textContent="None";let a=document.createElement("option");a.value="1",a.textContent="Low";let c=document.createElement("option");c.value="2",c.textContent="Medium";let d=document.createElement("option");return d.value="3",d.textContent="High",o.append(l,a,c,d),o};function u(e){let t=0;for(let n=0;n<E.nameArray.length;n++)E.nameArray[n]==e&&(t=n);return t}const p=(()=>{function e(e){null!=e&&(e.classList.remove("active"),overlay.classList.remove("active"))}return{taskModal:o=>{let r=t("modal break-normal",o+"Modal"),l=t("modal-header"),a=n("close-button","","");a.innerHTML="&times;",a.dataset.closeButton,a.addEventListener("click",(()=>{e(a.closest(".modal"))})),l.append(t("title","","Task Details"),a),r.append(l);let c,d=t("modal-body"),s=document.getElementById("title").textContent;for(let e=0;e<h.getProjectItem().nameArray.length;e++)h.getProjectItem().nameArray[e]==s&&(c=e);let i=h.getProjectItem().projectArray[c].projectName+" / "+h.getProjectItem().projectArray[c].tasks[o].project;return d.append(t("","","Project: "+i)),d.append(t("","","Title: "+h.getProjectItem().projectArray[c].tasks[o].objective)),d.append(t("","","Description: "+h.getProjectItem().projectArray[c].tasks[o].desc)),d.append(t("","","Due Date: "+h.getProjectItem().projectArray[c].tasks[o].date)),d.append(t("","","Priority: "+h.getProjectItem().projectArray[c].tasks[o].priority)),r.append(d),r},editModal:o=>{let r=t("modal",o+"otherModal"),a=t("modal-header"),p=n("close-button");p.innerHTML="&times;",p.dataset.closeButton,p.addEventListener("click",(()=>{e(p.closest(".modal"))})),a.append(t("title","","Edit Task"),p),r.append(a);let g=t("modal-body"),y=c(o),f=t("flex flex-col gap-2"),v=t("flex flex-col"),j=d(o,"objective"),b=s("text",o,"objective","bg-white border-[1px] border-black h-[2em] focus:border-[2px] focus:border-[#2994b2] focus:outline-none");v.append(j,b),f.append(v);let k=t("flex flex-col"),I=d(o,"description"),x=i(o,"bg-white border-[1px] border-black focus:border-[2px] focus:border-[#2994b2] focus:outline-none");k.append(I,x),f.append(k);let A=t("flex justify-around"),L=t("flex justify-start gap-12"),B=t("flex flex-col"),P=d(o,"priority"),T=m(o,"bg-white border-[1px] border-black h-7 focus:border-[2px] focus:border-[#2994b2] focus:outline-none");B.append(P,T),L.append(B);let C=t("flex flex-col"),w=d(o,"date"),M=s("date",o,"date","bg-white border-[1px] border-black focus:border-[2px] focus:border-[#2994b2] focus:outline-none");C.append(w,M),L.append(C),A.append(L);let S=n("flex text-xl my-2 items-center");S.setAttribute("type","submit"),S.setAttribute("form","taskForm");let N=u(document.getElementById("title").innerHTML);S.addEventListener("click",(()=>{let e=o+"objective",t=o+"desc",n=o+"priority",r=o+"date",l=document.getElementById(e).value,a=document.getElementById(t).value,c=document.getElementById(n).value,d=document.getElementById(r).value;E.projectArray[N].tasks.push(makeTask(l,a,c,d)),E.projectArray[0].tasks.push(makeTask(l,a,c,d)),document.getElementById(e).value="",document.getElementById(t).value="",document.getElementById(n).value="0",document.getElementById(r).value="",h.updateProjectInfo(E)}));let q=t("mx-2 relative"),D=l(!0),H=l(!1),z=t("","","Add");return q.append(D,H),S.append(q,z),A.append(S),f.append(A),y.append(f),g.append(y),r.append(g),r}}})(),g=(()=>{let e=0;return{kill:t=>{console.log(e);let n="task"+t,o=u(document.getElementById("title").innerHTML);document.getElementById("content").removeChild(document.getElementById(n));let r=h.getProjectItem();console.log(r),console.log(o),console.log(r.projectArray[o].tasks),r.projectArray[o].tasks.splice(t-e,1),console.log(r.projectArray[o].tasks),h.updateProjectInfo(r),0==r.projectArray[o].tasks.length?e=0:e++},reptitions:e}})(),y=(e,l)=>{let c=t("","task"+e),d=t("rounded-[10px] flex justify-between hover:bg-[#cccccc] min-h-[3rem] items-center hover:relative hover:bottom-1 hover:shadow-xl flex-col lg:flex-row py-2"),s=t("flex items-start justify-start lg:justify-start lg:items-center w-full"),i=r(e);i.addEventListener("click",(()=>{g.kill(e)}));let m=u(document.getElementById("title").innerHTML),y=h.getProjectItem().projectArray[m].tasks[e].objective,f=t("","",y);s.append(i,f),d.append(s);let v=t("flex gap-6 mr-8"),E=t(),j=n("hover:-translate-y-1 hover:scale-110 transition ease-in-out duration-300","","Details");j.dataset.modalTarget=e+"Modal",j.addEventListener("click",(()=>{var e;null!=(e=document.getElementById(j.dataset.modalTarget))&&(e.classList.add("active"),overlay.classList.add("active"))}));let b=p.taskModal(e);E.append(j,b),v.append(E);let k=o(e);k.addEventListener("click",(()=>{var e;null!=(e=document.querySelector(k.dataset.modalTarget))&&(e.classList.remove("active"),overlay.classList.remove("active"))}));let I=p.editModal(e);v.append(k,I);let x=a(e);return x.addEventListener("click",(()=>{g.kill(e)})),v.append(x),d.append(v),c.append(d),c},f=e=>{g.reptitions=0;let t=u(document.getElementById("title").innerHTML.trim()),n=document.getElementById("content");for(;n.childNodes.length>4;)n.removeChild(n.firstChild);if(!e.classList.contains("gettingDeleted")){let e=h.getProjectItem();if(e.projectArray[t].tasks.length>0)for(let n=0;n<e.projectArray[t].tasks.length;n++){let e=y(n);document.getElementById("content").insertBefore(e,document.getElementById("taskButton"))}}};function v(e){e.forEach((e=>{let t=e.cloneNode(!0);e.parentNode.replaceChild(t,e)}))}const h=(()=>{const e=e=>{localStorage.setItem("projectInfo",JSON.stringify(e))},t=()=>JSON.parse(localStorage.getItem("projectInfo"));return{updateProjectInfo:e,getProjectItem:t,initialize:()=>{let n=t();if(e(n),0!=t().projectArray[0].tasks.length)for(let e=0;e<t().projectArray[0].tasks.length;e++){let t=y(e);document.getElementById("content").insertBefore(t,document.getElementById("taskButton"))}}}})(),E=(()=>{const t=[],n=[];return document.querySelectorAll("[data-project-name]").forEach((o=>{t.push(o.dataset.projectName);let r=e(o.dataset.projectName);n.push(r)})),{nameArray:t,projectArray:n}})(),j=(e,t,n,o,r)=>({objective:e,desc:t,priority:n,date:o,project:r}),b=(()=>{const t=()=>{let e=document.querySelectorAll(".directory");for(let t=0;t<e.length;t++)e[t].addEventListener("click",(()=>{e.forEach((e=>{e.classList.contains("toggled")&&e.classList.remove("toggled")}));const n=document.getElementById("title");let o,r=e[t].childNodes;o=r.length>3?r[3].textContent:r[1].textContent,e[t].classList.add("toggled"),n.textContent=o}));document.querySelectorAll(".directory").forEach((e=>{e.addEventListener("click",(()=>{f(e)}))}))};function n(e){const t=document.createElement("button");for(let n=0;n<e.length;n++)t.classList.add(e[n]);return t}function o(e){const t=document.createElement("div");t.innerHTML="&times;";for(let n=0;n<e.length;n++)t.classList.add(e[n]);return t}function r(e){const t=new Image(20,20);t.src="/src/modules/project-image.png";for(let n=0;n<e.length;n++)t.classList.add(e[n]);return t}function l(e){const t=document.createElement("div");return t.textContent=e,t.dataset.projectName=e,t.dataset.id=E.nameArray.length-1,t}return{buttonChange:t,navToggle:()=>{const e=document.getElementsByClassName("toggle-button")[0],t=document.getElementById("nav"),n=document.getElementById("main");e.addEventListener("click",(()=>{t.classList.toggle("active"),n.classList.toggle("active")}))},activateModals:()=>{const e=document.querySelectorAll("[data-modal-target"),t=document.querySelectorAll("[data-close-button]"),n=document.getElementById("overlay");e.forEach((e=>{e.addEventListener("click",(()=>{var t;null!=(t=document.querySelector(e.dataset.modalTarget))&&(t.classList.add("active"),n.classList.add("active"))}))})),t.forEach((e=>{e.addEventListener("click",(()=>{var t;null!=(t=e.closest(".modal"))&&(t.classList.remove("active"),n.classList.remove("active"))}))}))},addProject:()=>{document.getElementById("addProject").addEventListener("click",(a=>{a.preventDefault(),function(){const a=document.getElementById("name").value.trim();document.getElementById("name").value="";let c=0,d=0;for(;c<h.getProjectItem().nameArray.length;){if(h.getProjectItem().nameArray[c]===a){d++;break}c++}if(0==d){let c=e(a),d=h.getProjectItem();d.projectArray.push(c),d.nameArray.push(a);const s=document.getElementById("additionalProjects"),i=n(["hover:bg-[#cccccc]","rounded-md","w-full","py-2","flex","justify-between","items-center","h-12","px-1","directory"]),m=r(["h-[1.3rem]","w-[1.3rem]","flex","justify-start","items-center","mx-4","box-content"]),u=l(a);u.classList.add("closest");const p=o(["ml-4","z-10","flex","justify-end","killbill"]);i.append(m),i.append(u),i.append(p),s.insertBefore(i,document.getElementById("addBefore")),v(document.querySelectorAll(".directory")),t(),v(document.querySelectorAll(".killbill")),document.querySelectorAll(".killbill").forEach((e=>{e.addEventListener("click",(()=>{console.log("killbill is getting clicked"),e.parentElement.classList.add("gettingDeleted");let t=e.previousElementSibling.dataset.id,n=h.getProjectItem();n.nameArray.splice(t,1),n.projectArray.splice(t,1);let o=e.previousElementSibling.dataset.projectName.trim();if(console.log(o),console.log(n.projectArray[0].tasks.length),n.projectArray[0].tasks.length>0)for(let e=0;e<n.projectArray[0].tasks.length;e++)n.projectArray[0].tasks[e].project==o&&(n.projectArray[0].tasks.splice(e,1),console.log("its going through"),e-=1);h.updateProjectInfo(n),e.parentElement.remove()}))})),h.updateProjectInfo(d)}}()}))},addTask:()=>{document.getElementById("addTask").addEventListener("click",(e=>{e.preventDefault(),function(){const e=document.getElementById("title");let t=u(e.innerHTML);console.log("clicked");let n=document.getElementById("objective").value,o=document.getElementById("description").value,r=document.getElementById("priority").value,l=document.getElementById("date").value,a=h.getProjectItem();"Inbox"!=e.textContent?(a.projectArray[0].tasks.push(j(n,o,r,l,e.textContent.trim())),a.projectArray[t].tasks.push(j(n,o,r,l,e.textContent.trim()))):a.projectArray[0].tasks.push(j(n,o,r,l,e.textContent.trim())),h.updateProjectInfo(a),document.getElementById("objective").value="",document.getElementById("description").value="",document.getElementById("priority").value="0",document.getElementById("date").value="";let c=a.projectArray[t].tasks.length-1,d=y(c);document.getElementById("content").insertBefore(d,document.getElementById("taskButton"))}()}))},makeBtn:n,makeDiv:l,makeImg:r,makeX:o}})();b.buttonChange(),h.initialize(),b.navToggle(),b.activateModals(),b.addProject(),b.addTask(),console.log({testString:"This is working, along with Tailwind!"})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,