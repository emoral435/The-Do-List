(()=>{"use strict";const e=e=>({projectName:e,tasks:[]}),t=(()=>{const e=e=>{localStorage.setItem("projectInfo",JSON.stringify(e))},t=()=>localStorage.getItem("projectInfo");return{updateProjectInfo:e,getProjectItem:t,check:()=>{t()},initialize:()=>{e(n)}}})(),n=(()=>{const t=[],n=[];return document.querySelectorAll("[data-project-name]").forEach((o=>{t.push(o.dataset.projectName);let c=e(o.dataset.projectName);n.push(c)})),{nameArray:t,projectArray:n}})();function o(e){e.forEach((e=>{let t=e.cloneNode(!0);e.parentNode.replaceChild(t,e)}))}const c=(()=>{const c=document.getElementById("title"),l=()=>{let e=document.querySelectorAll(".directory");for(let t=0;t<e.length;t++)e[t].addEventListener("click",(()=>{e.forEach((e=>{e.classList.contains("toggled")&&e.classList.remove("toggled")}));let n,o=e[t].childNodes;n=o.length>3?o[3].textContent:o[1].textContent,e[t].classList.add("toggled"),c.textContent=n}))};return{buttonChange:l,navToggle:()=>{const e=document.getElementsByClassName("toggle-button")[0],t=document.getElementById("nav"),n=document.getElementById("main");e.addEventListener("click",(()=>{t.classList.toggle("active"),n.classList.toggle("active")}))},activateModals:()=>{const e=document.querySelectorAll("[data-modal-target"),t=document.querySelectorAll("[data-close-button]"),n=document.getElementById("overlay");function o(e){null!=e&&(e.classList.remove("active"),n.classList.remove("active"))}e.forEach((e=>{e.addEventListener("click",(()=>{var t;null!=(t=document.querySelector(e.dataset.modalTarget))&&(t.classList.add("active"),n.classList.add("active"))}))})),n.addEventListener("click",(()=>{document.querySelectorAll(".modal-active").foreEach((e=>{o(e)}))})),t.forEach((e=>{e.addEventListener("click",(()=>{o(e.closest(".modal"))}))}))},addProject:()=>{document.getElementById("addProject").addEventListener("click",(c=>{c.preventDefault(),function(){const c=document.getElementById("name").value;document.getElementById("name").value="";let a=0,r=0;for(;a<n.nameArray.length;){if(n.nameArray[a]===c){r++;break}a++}if(0==r){let a=e(c);n.projectArray.push(a),n.nameArray.push(c),t.updateProjectInfo(n);const r=document.getElementById("additionalProjects"),d=function(e){const t=document.createElement("button");for(let n=0;n<e.length;n++)t.classList.add(e[n]);return t}(["hover:bg-[#cccccc]","rounded-md","w-full","py-2","flex","justify-between","items-center","h-12","px-1","directory"]),i=function(e){const t=new Image(20,20);t.src="/src/modules/project-image.png";for(let n=0;n<e.length;n++)t.classList.add(e[n]);return t}(["h-[1.3rem]","w-[1.3rem]","flex","justify-start","items-center","mx-4","box-content"]),s=function(e){const t=document.createElement("div");return t.textContent=e,t.dataset.projectName=e,t.dataset.id=n.nameArray.length-1,t}(c),m=function(e){const t=document.createElement("div");t.innerHTML="&times;";for(let n=0;n<e.length;n++)t.classList.add(e[n]);return t}(["ml-4","z-10","flex","justify-end","killbill"]);d.append(i),d.append(s),d.append(m),r.insertBefore(d,document.getElementById("addBefore")),o(document.querySelectorAll(".directory")),l(),o(document.querySelectorAll(".killbill")),document.querySelectorAll(".killbill").forEach((e=>{e.addEventListener("click",(()=>{let o=e.previousElementSibling.dataset.id;n.nameArray.splice(o,1),n.projectArray.splice(o,1),t.updateProjectInfo(n),e.parentElement.remove()}))}))}}()}))},addTask:()=>{document.getElementById("addTask").addEventListener("click",(e=>{e.preventDefault(),function(){let e=function(e){let t=0;for(let o=0;o<n.nameArray.length;o++)return n.nameArray[o]===e.textContent&&(t=o),t}(c),o=document.getElementById("objective").value,l=document.getElementById("description").value,a=document.getElementById("priority").value,r=document.getElementById("date").value;n.projectArray[e].tasks.push(((e,t,n,o)=>({objective:e,desc:t,priority:n,date:o}))(o,l,a,r)),document.getElementById("objective").value="",document.getElementById("description").value="",document.getElementById("priority").value="0",document.getElementById("date").value="",t.updateProjectInfo(n)}()}))}}})();console.log({testString:"This is working, along with Tailwind!"}),c.buttonChange(),c.navToggle(),c.activateModals(),t.initialize(),c.addProject(),c.addTask()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,