(()=>{"use strict";const e=e=>({projectName:e,tasks:[]}),t=function(e="none",t="",n=""){let l,o=document.createElement("div");if(""!=e){l=e.split(" ");for(let e=0;e<l.length;e++)o.classList.add(l[e])}return null!=t&&(o.id=t),null!=n&&(o.textContent=n),o},n=function(e="",t="",n=""){let l=e.split(" "),o=document.createElement("button");if(""!=e)for(let e=0;e<l.length;e++)o.classList.add(l[e]);return o.id=t,o.textContent=n,o},l=function(e){let t="h-6 w-6 cursor-pointer hover:-translate-y-1 hover:scale-110 transition ease-in-out duration-300".split(" "),n=document.createElement("img");n.src="/src/modules/edit.svg",n.dataset.modalTarget="#"+e+"otherModal";for(let e=0;e<t.length;e++)n.classList.add(t[e]);return n},o=function(e){let t="min-h-[20px] min-w-[20px] inline-block bg-white border-red-500 border-[3px] rounded-[50%] hover:bg-slate-300 mx-3".split(" "),n=document.createElement("span");for(let e=0;e<t.length;e++)n.classList.add(t[e]);return n.dataset.id=e,n},r=function(e){let t="h-[2px] bg-slate-700 w-[12px] block".split(" "),n=document.createElement("span");for(let e=0;e<t.length;e++)n.classList.add(t[e]);return e?n.classList.add("translate-y-[2px]"):n.classList.add("rotate-[90deg]"),n},a=function(e){let t=document.createElement("img");t.src="/src/modules/trash.svg",t.dataset.id=e;let n="h-6 w-6 cursor-pointer trash hover:-translate-y-1 hover:scale-110 transition ease-in-out duration-300".split(" ");for(let e=0;e<n.length;e++)t.classList.add(n[e]);return t},d=function(e){let t=e+"form",n=document.createElement("form");return n.setAttribute("id",t),n.setAttribute("action",""),n},c=function(e,t){let n=e+t,l=document.createElement("label");return l.setAttribute("for",n),l.textContent=t[0].toUpperCase()+t.slice(1,t.length)+":",l},s=function(e,t,n,l){let o=l.split(" "),r=document.createElement("input");for(let e=0;e<o.length;e++)r.classList.add(o[e]);let a=t+n;return r.setAttribute("type",e),r.setAttribute("id",a),"text"===e&&r.setAttribute("required",""),r},i=function(e,t){let n=t.split(" "),l=document.createElement("textarea");l.setAttribute("required","");for(let e=0;e<n.length;e++)l.classList.add(n[e]);return l.cols="5",l.rows="5",l},u=function(e,t){let n=t.split(" "),l=document.createElement("select"),o=e+"priority";l.setAttribute("id",o);for(let e=0;e<n.length;e++)l.classList.add(n[e]);let r=document.createElement("option");r.value="0",r.textContent="None";let a=document.createElement("option");a.value="1",a.textContent="Low";let d=document.createElement("option");d.value="2",d.textContent="Medium";let c=document.createElement("option");return c.value="3",c.textContent="High",l.append(r,a,d,c),l};function m(e){let t=0;for(let n=0;n<v.nameArray.length;n++)v.nameArray[n]==e&&(t=n);return t}const p=(()=>{function e(e){null!=e&&(e.classList.remove("active"),overlay.classList.remove("active"))}return{taskModal:l=>{let o=t("modal break-normal",l+"Modal"),r=t("modal-header"),a=n("close-button","","");a.innerHTML="&times;",a.dataset.closeButton,a.addEventListener("click",(()=>{e(a.closest(".modal"))})),r.append(t("title","","Task Details"),a),o.append(r);let d,c=t("modal-body"),s=document.getElementById("title").textContent;for(let e=0;e<v.nameArray.length;e++)v.nameArray[e]==s&&(d=e);return c.append(t("","","Project: "+v.projectArray[d].tasks[l].project)),c.append(t("","","Title: "+v.projectArray[d].tasks[l].objective)),c.append(t("","","Description: "+v.projectArray[d].tasks[l].desc)),c.append(t("","","Due Date: "+v.projectArray[d].tasks[l].date)),c.append(t("","","Priority: "+v.projectArray[d].tasks[l].priority)),o.append(c),o},editModal:l=>{let o=t("modal",l+"otherModal"),a=t("modal-header"),p=n("close-button");p.innerHTML="&times;",p.dataset.closeButton,p.addEventListener("click",(()=>{e(p.closest(".modal"))})),a.append(t("title","","Edit Task"),p),o.append(a);let g=t("modal-body"),y=d(l),f=t("flex flex-col gap-2"),h=t("flex flex-col"),E=c(l,"objective"),b=s("text",l,"objective","bg-white border-[1px] border-black h-[2em] focus:border-[2px] focus:border-[#2994b2] focus:outline-none");h.append(E,b),f.append(h);let k=t("flex flex-col"),j=c(l,"description"),x=i(l,"bg-white border-[1px] border-black focus:border-[2px] focus:border-[#2994b2] focus:outline-none");k.append(j,x),f.append(k);let L=t("flex justify-around"),A=t("flex justify-start gap-12"),I=t("flex flex-col"),B=c(l,"priority"),T=u(l,"bg-white border-[1px] border-black h-7 focus:border-[2px] focus:border-[#2994b2] focus:outline-none");I.append(B,T),A.append(I);let w=t("flex flex-col"),C=c(l,"date"),M=s("date",l,"date","bg-white border-[1px] border-black focus:border-[2px] focus:border-[#2994b2] focus:outline-none");w.append(C,M),A.append(w),L.append(A);let S=n("flex text-xl my-2 items-center");S.setAttribute("type","submit"),S.setAttribute("form","taskForm");let N=m(document.getElementById("title").innerHTML);S.addEventListener("click",(()=>{let e=l+"objective",t=l+"desc",n=l+"priority",o=l+"date",r=document.getElementById(e).value,a=document.getElementById(t).value,d=document.getElementById(n).value,c=document.getElementById(o).value;v.projectArray[N].tasks.push(makeTask(r,a,d,c)),v.projectArray[0].tasks.push(makeTask(r,a,d,c)),document.getElementById(e).value="",document.getElementById(t).value="",document.getElementById(n).value="0",document.getElementById(o).value="",storage.updateProjectInfo(v)}));let P=t("mx-2 relative"),q=r(!0),D=r(!1),H=t("","","Add");return P.append(q,D),S.append(P,H),L.append(S),f.append(L),y.append(f),g.append(y),o.append(g),o}}})(),g=e=>{console.log("killTask")},y=(e,r)=>{let d=t(),c=t("rounded-[10px] flex justify-between hover:bg-[#cccccc] min-h-[3rem] items-center hover:relative hover:bottom-1 hover:shadow-xl flex-col lg:flex-row py-2"),s=t("flex items-start justify-start lg:justify-start lg:items-center w-full"),i=o(e);i.addEventListener("click",(()=>{g(e)}));let u=m(document.getElementById("title").innerHTML),y=v.projectArray[u].tasks[e].objective,f=t("","",y);s.append(i,f),c.append(s);let h=t("flex gap-6 mr-8"),E=t(),b=n("hover:-translate-y-1 hover:scale-110 transition ease-in-out duration-300","","Details");b.dataset.modalTarget=e+"Modal",b.addEventListener("click",(()=>{var e;null!=(e=document.getElementById(b.dataset.modalTarget))&&(e.classList.add("active"),overlay.classList.add("active"))}));let k=p.taskModal(e);E.append(b,k),h.append(E);let j=l(e);j.addEventListener("click",(()=>{var e;null!=(e=document.querySelector(j.dataset.modalTarget))&&(e.classList.remove("active"),overlay.classList.remove("active"))}));let x=p.editModal(e);h.append(j,x);let L=a(e);return L.addEventListener("click",(()=>{g(e)})),h.append(L),c.append(h),d.append(c),d},f=(()=>{const e=e=>{localStorage.setItem("projectInfo",JSON.stringify(e))},t=()=>JSON.parse(localStorage.getItem("projectInfo"));return{updateProjectInfo:e,getProjectItem:t,initialize:()=>{let n=t();e(n),t().projectArray[0].tasks.length}}})(),v=(()=>{const t=[],n=[];return document.querySelectorAll("[data-project-name]").forEach((l=>{t.push(l.dataset.projectName);let o=e(l.dataset.projectName);n.push(o)})),{nameArray:t,projectArray:n}})();function h(e){e.forEach((e=>{let t=e.cloneNode(!0);e.parentNode.replaceChild(t,e)}))}const E=(e,t,n,l,o)=>({objective:e,desc:t,priority:n,date:l,project:o}),b=e=>{let t=m(document.getElementById("title").innerHTML.trim()),n=document.getElementById("content");for(;n.childNodes.length>4;)n.removeChild(n.firstChild);if(!e.classList.contains("gettingDeleted")){let e=f.getProjectItem();if(e.projectArray[t].tasks.length>0)for(let n=0;n<e.projectArray[t].tasks.length;n++){let e=y(n);document.getElementById("content").insertBefore(e,document.getElementById("taskButton"))}}},k=(()=>{const t=()=>{let e=document.querySelectorAll(".directory");for(let t=0;t<e.length;t++)e[t].addEventListener("click",(()=>{e.forEach((e=>{e.classList.contains("toggled")&&e.classList.remove("toggled")}));const n=document.getElementById("title");let l,o=e[t].childNodes;l=o.length>3?o[3].textContent:o[1].textContent,e[t].classList.add("toggled"),n.textContent=l}))};return{buttonChange:t,navToggle:()=>{const e=document.getElementsByClassName("toggle-button")[0],t=document.getElementById("nav"),n=document.getElementById("main");e.addEventListener("click",(()=>{t.classList.toggle("active"),n.classList.toggle("active")}))},activateModals:()=>{const e=document.querySelectorAll("[data-modal-target"),t=document.querySelectorAll("[data-close-button]"),n=document.getElementById("overlay");e.forEach((e=>{e.addEventListener("click",(()=>{var t;null!=(t=document.querySelector(e.dataset.modalTarget))&&(t.classList.add("active"),n.classList.add("active"))}))})),t.forEach((e=>{e.addEventListener("click",(()=>{var t;null!=(t=e.closest(".modal"))&&(t.classList.remove("active"),n.classList.remove("active"))}))}))},addProject:()=>{document.getElementById("addProject").addEventListener("click",(n=>{n.preventDefault(),function(){const n=document.getElementById("name").value;document.getElementById("name").value="";let l=0,o=0;for(;l<v.nameArray.length;){if(v.nameArray[l]===n){o++;break}l++}if(0==o){let l=e(n);v.projectArray.push(l),v.nameArray.push(n),f.updateProjectInfo(v);const o=document.getElementById("additionalProjects"),r=function(e){const t=document.createElement("button");for(let n=0;n<e.length;n++)t.classList.add(e[n]);return t}(["hover:bg-[#cccccc]","rounded-md","w-full","py-2","flex","justify-between","items-center","h-12","px-1","directory"]),a=function(e){const t=new Image(20,20);t.src="/src/modules/project-image.png";for(let n=0;n<e.length;n++)t.classList.add(e[n]);return t}(["h-[1.3rem]","w-[1.3rem]","flex","justify-start","items-center","mx-4","box-content"]),d=function(e){const t=document.createElement("div");return t.textContent=e,t.dataset.projectName=e,t.dataset.id=v.nameArray.length-1,t}(n);d.classList.add("closest");const c=function(e){const t=document.createElement("div");t.innerHTML="&times;";for(let n=0;n<e.length;n++)t.classList.add(e[n]);return t}(["ml-4","z-10","flex","justify-end","killbill"]);r.append(a),r.append(d),r.append(c),o.insertBefore(r,document.getElementById("addBefore")),h(document.querySelectorAll(".directory")),t(),h(document.querySelectorAll(".killbill")),document.querySelectorAll(".killbill").forEach((e=>{e.addEventListener("click",(()=>{console.log("killbill is getting clicked"),e.parentElement.classList.add("gettingDeleted");let t=e.previousElementSibling.dataset.id;v.nameArray.splice(t,1),v.projectArray.splice(t,1);let n=e.previousElementSibling.dataset.projectName.trim();if(console.log(n),console.log(v.projectArray[0].tasks.length),v.projectArray[0].tasks.length>0)for(let e=0;e<v.projectArray[0].tasks.length;e++)v.projectArray[0].tasks[e].project==n&&(v.projectArray[0].tasks.splice(e,1),console.log("its going through"),e-=1);f.updateProjectInfo(v),e.parentElement.remove()}))})),document.querySelectorAll(".directory").forEach((e=>{e.addEventListener("click",(()=>{b(e)}))}))}}()}))},addTask:()=>{document.getElementById("addTask").addEventListener("click",(e=>{e.preventDefault(),function(){const e=document.getElementById("title");let t=m(e.innerHTML);console.log("clicked");let n=document.getElementById("objective").value,l=document.getElementById("description").value,o=document.getElementById("priority").value,r=document.getElementById("date").value;"Inbox"!=e.textContent?(v.projectArray[0].tasks.push(E(n,l,o,r,e.textContent.trim())),v.projectArray[t].tasks.push(E(n,l,o,r,e.textContent.trim()))):v.projectArray[0].tasks.push(E(n,l,o,r)),document.getElementById("objective").value="",document.getElementById("description").value="",document.getElementById("priority").value="0",document.getElementById("date").value="";let a=v.projectArray[t].tasks.length-1,d=y(a);f.updateProjectInfo(v),document.getElementById("content").insertBefore(d,document.getElementById("taskButton"))}()}))}}})();console.log({testString:"This is working, along with Tailwind!"}),k.buttonChange(),k.navToggle(),k.activateModals(),f.initialize(),k.addProject(),k.addTask()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,